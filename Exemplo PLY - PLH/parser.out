Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DEFAULT

Grammar

Rule 0     S' -> task_definition
Rule 1     task_definition -> task_signature task_definition
Rule 2     task_definition -> task_signature
Rule 3     task_signature -> ID L_PAREN parameter_list R_PAREN statement
Rule 4     parameter_list -> ID COMMA parameter_list
Rule 5     parameter_list -> ID
Rule 6     parameter_list -> empty
Rule 7     loop_statement -> LOOP expression statement
Rule 8     loop_statement -> LOOP ID COMMA expression COMMA value statement
Rule 9     loop_statement -> LOOP ID COMMA expression statement
Rule 10    condition_statement -> expression QUESTION statement more_condition
Rule 11    more_condition -> OR binary_expression QUESTION statement more_condition
Rule 12    more_condition -> COLON statement
Rule 13    more_condition -> empty
Rule 14    value_list -> value_list COMMA expression
Rule 15    value_list -> expression
Rule 16    value_list -> empty
Rule 17    expression -> binary_expression
Rule 18    expression -> list_rem
Rule 19    expression -> hash_def
Rule 20    expression -> hash_rem
Rule 21    list_rem -> ID L_BRACKET OR value R_BRACKET
Rule 22    list_rem -> ID L_BRACKET value OR R_BRACKET
Rule 23    list_rem -> ID L_BRACKET value OR value R_BRACKET
Rule 24    binary_expression -> binary_expression operator binary_expression
Rule 25    binary_expression -> L_PAREN binary_expression R_PAREN
Rule 26    binary_expression -> unary_operator binary_expression
Rule 27    binary_expression -> value
Rule 28    list_req -> ID list_req_access
Rule 29    list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access
Rule 30    list_req_access -> L_BRACKET binary_expression R_BRACKET
Rule 31    operator -> binary_operator
Rule 32    operator -> relational_operator
Rule 33    statement -> expression_statement SEMICOLON
Rule 34    statement -> compound_statement
Rule 35    statement -> loop_statement
Rule 36    statement -> condition_statement
Rule 37    statement -> return_command
Rule 38    statement -> free_function SEMICOLON
Rule 39    statement -> import_function SEMICOLON
Rule 40    statement -> external_call SEMICOLON
Rule 41    statement -> task_call SEMICOLON
Rule 42    statement -> loop_flows SEMICOLON
Rule 43    external_call -> ID DOT task_call
Rule 44    expression_statement -> ID assignment_operator expression
Rule 45    expression_statement -> list_req assignment_operator expression
Rule 46    assignment_operator -> ASSIGN
Rule 47    assignment_operator -> MUL_ASSIGN
Rule 48    assignment_operator -> DIV_ASSIGN
Rule 49    assignment_operator -> ADD_ASSIGN
Rule 50    assignment_operator -> SUB_ASSIGN
Rule 51    assignment_operator -> EXP_ASSIGN
Rule 52    assignment_operator -> LEFT_ASSIGN
Rule 53    assignment_operator -> RIGHT_ASSIGN
Rule 54    assignment_operator -> AND_ASSIGN
Rule 55    assignment_operator -> OR_ASSIGN
Rule 56    assignment_operator -> XOR_ASSIGN
Rule 57    assignment_operator -> MOD_ASSIGN
Rule 58    compound_statement -> L_BRACE R_BRACE
Rule 59    compound_statement -> L_BRACE statement_list R_BRACE
Rule 60    statement_list -> statement_list statement
Rule 61    statement_list -> statement
Rule 62    loop_flows -> CONTINUE
Rule 63    loop_flows -> BREAK
Rule 64    import_function -> ID ASSIGN IMPORT L_PAREN STR R_PAREN
Rule 65    import_function -> IMPORT L_PAREN ID R_PAREN
Rule 66    free_function -> ID ASSIGN FREE L_PAREN ID R_PAREN
Rule 67    return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON
Rule 68    list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET
Rule 69    list_def -> L_BRACKET value_list R_BRACKET
Rule 70    hash_def -> L_BRACE key_value_list R_BRACE
Rule 71    hash_rem -> value REM list_def
Rule 72    key_value_list -> key_value_list COMMA value COLON expression
Rule 73    key_value_list -> value COLON expression
Rule 74    key_value_list -> empty
Rule 75    task_call -> ID L_PAREN value_list R_PAREN
Rule 76    value -> ID
Rule 77    value -> INT
Rule 78    value -> FLOAT
Rule 79    value -> STR
Rule 80    value -> task_call
Rule 81    value -> list_req
Rule 82    value -> external_call
Rule 83    value -> list_def
Rule 84    value -> LEN value
Rule 85    value -> NULL
Rule 86    unary_operator -> ADD
Rule 87    unary_operator -> SUB
Rule 88    unary_operator -> NOT
Rule 89    binary_operator -> ADD
Rule 90    binary_operator -> SUB
Rule 91    binary_operator -> MUL
Rule 92    binary_operator -> DIV
Rule 93    binary_operator -> EXP
Rule 94    binary_operator -> AND
Rule 95    binary_operator -> OR
Rule 96    binary_operator -> XOR
Rule 97    binary_operator -> MOD
Rule 98    binary_operator -> RIGHT_OP
Rule 99    binary_operator -> LEFT_OP
Rule 100   relational_operator -> NOT_OP
Rule 101   relational_operator -> AND_OP
Rule 102   relational_operator -> OR_OP
Rule 103   relational_operator -> LE_OP
Rule 104   relational_operator -> GE_OP
Rule 105   relational_operator -> EQ_OP
Rule 106   relational_operator -> NE_OP
Rule 107   relational_operator -> MAJOR
Rule 108   relational_operator -> MINOR
Rule 109   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 86 89
ADD_ASSIGN           : 49
AND                  : 94
AND_ASSIGN           : 54
AND_OP               : 101
ASSIGN               : 46 64 66
BREAK                : 63
COLON                : 12 68 72 73
COMMA                : 4 8 8 9 14 72
CONTINUE             : 62
DEFAULT              : 
DIV                  : 92
DIV_ASSIGN           : 48
DOT                  : 43
EQ_OP                : 105
EXP                  : 93
EXP_ASSIGN           : 51
FLOAT                : 78
FREE                 : 66
GE_OP                : 104
ID                   : 3 4 5 8 9 21 22 23 28 43 44 64 65 66 66 75 76
IMPORT               : 64 65
INT                  : 77
LEFT_ASSIGN          : 52
LEFT_OP              : 99
LEN                  : 84
LE_OP                : 103
LOOP                 : 7 8 9
L_BRACE              : 58 59 70
L_BRACKET            : 21 22 23 29 30 68 69
L_PAREN              : 3 25 64 65 66 67 75
MAJOR                : 107
MINOR                : 108
MOD                  : 97
MOD_ASSIGN           : 57
MUL                  : 91
MUL_ASSIGN           : 47
NE_OP                : 106
NOT                  : 88
NOT_OP               : 100
NULL                 : 85
OR                   : 11 21 22 23 95
OR_ASSIGN            : 55
OR_OP                : 102
QUESTION             : 10 11
REM                  : 71
RETURN               : 67
RIGHT_ASSIGN         : 53
RIGHT_OP             : 98
R_BRACE              : 58 59 70
R_BRACKET            : 21 22 23 29 30 68 69
R_PAREN              : 3 25 64 65 66 67 75
SEMICOLON            : 33 38 39 40 41 42 67
STR                  : 64 79
SUB                  : 87 90
SUB_ASSIGN           : 50
XOR                  : 96
XOR_ASSIGN           : 56
error                : 

Nonterminals, with rules where they appear

assignment_operator  : 44 45
binary_expression    : 11 17 24 24 25 26 29 30 68 68
binary_operator      : 31
compound_statement   : 34
condition_statement  : 36
empty                : 6 13 16 74
expression           : 7 8 9 10 14 15 44 45 67 72 73
expression_statement : 33
external_call        : 40 82
free_function        : 38
hash_def             : 19
hash_rem             : 20
import_function      : 39
key_value_list       : 70 72
list_def             : 71 83
list_rem             : 18
list_req             : 45 81
list_req_access      : 28 29
loop_flows           : 42
loop_statement       : 35
more_condition       : 10 11
operator             : 24
parameter_list       : 3 4
relational_operator  : 32
return_command       : 37
statement            : 3 7 8 9 10 11 12 60 61
statement_list       : 59 60
task_call            : 41 43 80
task_definition      : 1 0
task_signature       : 1 2
unary_operator       : 26
value                : 8 21 22 23 23 27 71 72 73 84
value_list           : 14 69 75

Parsing method: LALR

state 0

    (0) S' -> . task_definition
    (1) task_definition -> . task_signature task_definition
    (2) task_definition -> . task_signature
    (3) task_signature -> . ID L_PAREN parameter_list R_PAREN statement

    ID              shift and go to state 2

    task_definition                shift and go to state 1
    task_signature                 shift and go to state 3

state 1

    (0) S' -> task_definition .



state 2

    (3) task_signature -> ID . L_PAREN parameter_list R_PAREN statement

    L_PAREN         shift and go to state 4


state 3

    (1) task_definition -> task_signature . task_definition
    (2) task_definition -> task_signature .
    (1) task_definition -> . task_signature task_definition
    (2) task_definition -> . task_signature
    (3) task_signature -> . ID L_PAREN parameter_list R_PAREN statement

    $end            reduce using rule 2 (task_definition -> task_signature .)
    ID              shift and go to state 2

    task_definition                shift and go to state 5
    task_signature                 shift and go to state 3

state 4

    (3) task_signature -> ID L_PAREN . parameter_list R_PAREN statement
    (4) parameter_list -> . ID COMMA parameter_list
    (5) parameter_list -> . ID
    (6) parameter_list -> . empty
    (109) empty -> .

    ID              shift and go to state 8
    R_PAREN         reduce using rule 109 (empty -> .)

    parameter_list                 shift and go to state 7
    empty                          shift and go to state 6

state 5

    (1) task_definition -> task_signature task_definition .

    $end            reduce using rule 1 (task_definition -> task_signature task_definition .)


state 6

    (6) parameter_list -> empty .

    R_PAREN         reduce using rule 6 (parameter_list -> empty .)


state 7

    (3) task_signature -> ID L_PAREN parameter_list . R_PAREN statement

    R_PAREN         shift and go to state 9


state 8

    (4) parameter_list -> ID . COMMA parameter_list
    (5) parameter_list -> ID .

    COMMA           shift and go to state 10
    R_PAREN         reduce using rule 5 (parameter_list -> ID .)


state 9

    (3) task_signature -> ID L_PAREN parameter_list R_PAREN . statement
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    list_rem                       shift and go to state 18
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    compound_statement             shift and go to state 12
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 24
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    free_function                  shift and go to state 43
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 10

    (4) parameter_list -> ID COMMA . parameter_list
    (4) parameter_list -> . ID COMMA parameter_list
    (5) parameter_list -> . ID
    (6) parameter_list -> . empty
    (109) empty -> .

    ID              shift and go to state 8
    R_PAREN         reduce using rule 109 (empty -> .)

    parameter_list                 shift and go to state 48
    empty                          shift and go to state 6

state 11

    (26) binary_expression -> unary_operator . binary_expression
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 49
    unary_operator                 shift and go to state 11
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 52

state 12

    (34) statement -> compound_statement .

    OR              reduce using rule 34 (statement -> compound_statement .)
    COLON           reduce using rule 34 (statement -> compound_statement .)
    ID              reduce using rule 34 (statement -> compound_statement .)
    $end            reduce using rule 34 (statement -> compound_statement .)
    R_BRACE         reduce using rule 34 (statement -> compound_statement .)
    L_BRACE         reduce using rule 34 (statement -> compound_statement .)
    LOOP            reduce using rule 34 (statement -> compound_statement .)
    RETURN          reduce using rule 34 (statement -> compound_statement .)
    IMPORT          reduce using rule 34 (statement -> compound_statement .)
    CONTINUE        reduce using rule 34 (statement -> compound_statement .)
    BREAK           reduce using rule 34 (statement -> compound_statement .)
    L_PAREN         reduce using rule 34 (statement -> compound_statement .)
    ADD             reduce using rule 34 (statement -> compound_statement .)
    SUB             reduce using rule 34 (statement -> compound_statement .)
    NOT             reduce using rule 34 (statement -> compound_statement .)
    INT             reduce using rule 34 (statement -> compound_statement .)
    FLOAT           reduce using rule 34 (statement -> compound_statement .)
    STR             reduce using rule 34 (statement -> compound_statement .)
    LEN             reduce using rule 34 (statement -> compound_statement .)
    NULL            reduce using rule 34 (statement -> compound_statement .)
    L_BRACKET       reduce using rule 34 (statement -> compound_statement .)


state 13

    (68) list_def -> L_BRACKET . binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> L_BRACKET . value_list R_BRACKET
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (14) value_list -> . value_list COMMA expression
    (15) value_list -> . expression
    (16) value_list -> . empty
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (109) empty -> .
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def

    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    ID              shift and go to state 58
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    R_BRACKET       reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    L_BRACKET       shift and go to state 13
    L_BRACE         shift and go to state 55

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    empty                          shift and go to state 59
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 50
    hash_rem                       shift and go to state 27
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 60
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    expression                     shift and go to state 56
    value_list                     shift and go to state 57
    external_call                  shift and go to state 54

state 14

    (63) loop_flows -> BREAK .

    SEMICOLON       reduce using rule 63 (loop_flows -> BREAK .)


state 15

    (10) condition_statement -> expression . QUESTION statement more_condition

    QUESTION        shift and go to state 61


state 16

    (83) value -> list_def .

    REM             reduce using rule 83 (value -> list_def .)
    ADD             reduce using rule 83 (value -> list_def .)
    SUB             reduce using rule 83 (value -> list_def .)
    MUL             reduce using rule 83 (value -> list_def .)
    DIV             reduce using rule 83 (value -> list_def .)
    EXP             reduce using rule 83 (value -> list_def .)
    AND             reduce using rule 83 (value -> list_def .)
    OR              reduce using rule 83 (value -> list_def .)
    XOR             reduce using rule 83 (value -> list_def .)
    MOD             reduce using rule 83 (value -> list_def .)
    RIGHT_OP        reduce using rule 83 (value -> list_def .)
    LEFT_OP         reduce using rule 83 (value -> list_def .)
    NOT_OP          reduce using rule 83 (value -> list_def .)
    AND_OP          reduce using rule 83 (value -> list_def .)
    OR_OP           reduce using rule 83 (value -> list_def .)
    LE_OP           reduce using rule 83 (value -> list_def .)
    GE_OP           reduce using rule 83 (value -> list_def .)
    EQ_OP           reduce using rule 83 (value -> list_def .)
    NE_OP           reduce using rule 83 (value -> list_def .)
    MAJOR           reduce using rule 83 (value -> list_def .)
    MINOR           reduce using rule 83 (value -> list_def .)
    QUESTION        reduce using rule 83 (value -> list_def .)
    R_BRACKET       reduce using rule 83 (value -> list_def .)
    R_PAREN         reduce using rule 83 (value -> list_def .)
    COMMA           reduce using rule 83 (value -> list_def .)
    COLON           reduce using rule 83 (value -> list_def .)
    ID              reduce using rule 83 (value -> list_def .)
    L_BRACE         reduce using rule 83 (value -> list_def .)
    LOOP            reduce using rule 83 (value -> list_def .)
    RETURN          reduce using rule 83 (value -> list_def .)
    IMPORT          reduce using rule 83 (value -> list_def .)
    CONTINUE        reduce using rule 83 (value -> list_def .)
    BREAK           reduce using rule 83 (value -> list_def .)
    L_PAREN         reduce using rule 83 (value -> list_def .)
    NOT             reduce using rule 83 (value -> list_def .)
    INT             reduce using rule 83 (value -> list_def .)
    FLOAT           reduce using rule 83 (value -> list_def .)
    STR             reduce using rule 83 (value -> list_def .)
    LEN             reduce using rule 83 (value -> list_def .)
    NULL            reduce using rule 83 (value -> list_def .)
    L_BRACKET       reduce using rule 83 (value -> list_def .)
    SEMICOLON       reduce using rule 83 (value -> list_def .)
    R_BRACE         reduce using rule 83 (value -> list_def .)


state 17

    (42) statement -> loop_flows . SEMICOLON

    SEMICOLON       shift and go to state 62


state 18

    (18) expression -> list_rem .

    ID              reduce using rule 18 (expression -> list_rem .)
    L_BRACE         reduce using rule 18 (expression -> list_rem .)
    LOOP            reduce using rule 18 (expression -> list_rem .)
    RETURN          reduce using rule 18 (expression -> list_rem .)
    IMPORT          reduce using rule 18 (expression -> list_rem .)
    CONTINUE        reduce using rule 18 (expression -> list_rem .)
    BREAK           reduce using rule 18 (expression -> list_rem .)
    L_PAREN         reduce using rule 18 (expression -> list_rem .)
    ADD             reduce using rule 18 (expression -> list_rem .)
    SUB             reduce using rule 18 (expression -> list_rem .)
    NOT             reduce using rule 18 (expression -> list_rem .)
    INT             reduce using rule 18 (expression -> list_rem .)
    FLOAT           reduce using rule 18 (expression -> list_rem .)
    STR             reduce using rule 18 (expression -> list_rem .)
    LEN             reduce using rule 18 (expression -> list_rem .)
    NULL            reduce using rule 18 (expression -> list_rem .)
    L_BRACKET       reduce using rule 18 (expression -> list_rem .)
    QUESTION        reduce using rule 18 (expression -> list_rem .)
    COMMA           reduce using rule 18 (expression -> list_rem .)
    SEMICOLON       reduce using rule 18 (expression -> list_rem .)
    R_BRACKET       reduce using rule 18 (expression -> list_rem .)
    R_PAREN         reduce using rule 18 (expression -> list_rem .)
    R_BRACE         reduce using rule 18 (expression -> list_rem .)


state 19

    (37) statement -> return_command .

    OR              reduce using rule 37 (statement -> return_command .)
    COLON           reduce using rule 37 (statement -> return_command .)
    ID              reduce using rule 37 (statement -> return_command .)
    $end            reduce using rule 37 (statement -> return_command .)
    R_BRACE         reduce using rule 37 (statement -> return_command .)
    L_BRACE         reduce using rule 37 (statement -> return_command .)
    LOOP            reduce using rule 37 (statement -> return_command .)
    RETURN          reduce using rule 37 (statement -> return_command .)
    IMPORT          reduce using rule 37 (statement -> return_command .)
    CONTINUE        reduce using rule 37 (statement -> return_command .)
    BREAK           reduce using rule 37 (statement -> return_command .)
    L_PAREN         reduce using rule 37 (statement -> return_command .)
    ADD             reduce using rule 37 (statement -> return_command .)
    SUB             reduce using rule 37 (statement -> return_command .)
    NOT             reduce using rule 37 (statement -> return_command .)
    INT             reduce using rule 37 (statement -> return_command .)
    FLOAT           reduce using rule 37 (statement -> return_command .)
    STR             reduce using rule 37 (statement -> return_command .)
    LEN             reduce using rule 37 (statement -> return_command .)
    NULL            reduce using rule 37 (statement -> return_command .)
    L_BRACKET       reduce using rule 37 (statement -> return_command .)


state 20

    (77) value -> INT .

    REM             reduce using rule 77 (value -> INT .)
    ADD             reduce using rule 77 (value -> INT .)
    SUB             reduce using rule 77 (value -> INT .)
    MUL             reduce using rule 77 (value -> INT .)
    DIV             reduce using rule 77 (value -> INT .)
    EXP             reduce using rule 77 (value -> INT .)
    AND             reduce using rule 77 (value -> INT .)
    OR              reduce using rule 77 (value -> INT .)
    XOR             reduce using rule 77 (value -> INT .)
    MOD             reduce using rule 77 (value -> INT .)
    RIGHT_OP        reduce using rule 77 (value -> INT .)
    LEFT_OP         reduce using rule 77 (value -> INT .)
    NOT_OP          reduce using rule 77 (value -> INT .)
    AND_OP          reduce using rule 77 (value -> INT .)
    OR_OP           reduce using rule 77 (value -> INT .)
    LE_OP           reduce using rule 77 (value -> INT .)
    GE_OP           reduce using rule 77 (value -> INT .)
    EQ_OP           reduce using rule 77 (value -> INT .)
    NE_OP           reduce using rule 77 (value -> INT .)
    MAJOR           reduce using rule 77 (value -> INT .)
    MINOR           reduce using rule 77 (value -> INT .)
    QUESTION        reduce using rule 77 (value -> INT .)
    R_BRACKET       reduce using rule 77 (value -> INT .)
    R_PAREN         reduce using rule 77 (value -> INT .)
    COMMA           reduce using rule 77 (value -> INT .)
    COLON           reduce using rule 77 (value -> INT .)
    ID              reduce using rule 77 (value -> INT .)
    L_BRACE         reduce using rule 77 (value -> INT .)
    LOOP            reduce using rule 77 (value -> INT .)
    RETURN          reduce using rule 77 (value -> INT .)
    IMPORT          reduce using rule 77 (value -> INT .)
    CONTINUE        reduce using rule 77 (value -> INT .)
    BREAK           reduce using rule 77 (value -> INT .)
    L_PAREN         reduce using rule 77 (value -> INT .)
    NOT             reduce using rule 77 (value -> INT .)
    INT             reduce using rule 77 (value -> INT .)
    FLOAT           reduce using rule 77 (value -> INT .)
    STR             reduce using rule 77 (value -> INT .)
    LEN             reduce using rule 77 (value -> INT .)
    NULL            reduce using rule 77 (value -> INT .)
    L_BRACKET       reduce using rule 77 (value -> INT .)
    SEMICOLON       reduce using rule 77 (value -> INT .)
    R_BRACE         reduce using rule 77 (value -> INT .)


state 21

    (27) binary_expression -> value .
    (71) hash_rem -> value . REM list_def

    ADD             reduce using rule 27 (binary_expression -> value .)
    SUB             reduce using rule 27 (binary_expression -> value .)
    MUL             reduce using rule 27 (binary_expression -> value .)
    DIV             reduce using rule 27 (binary_expression -> value .)
    EXP             reduce using rule 27 (binary_expression -> value .)
    AND             reduce using rule 27 (binary_expression -> value .)
    OR              reduce using rule 27 (binary_expression -> value .)
    XOR             reduce using rule 27 (binary_expression -> value .)
    MOD             reduce using rule 27 (binary_expression -> value .)
    RIGHT_OP        reduce using rule 27 (binary_expression -> value .)
    LEFT_OP         reduce using rule 27 (binary_expression -> value .)
    NOT_OP          reduce using rule 27 (binary_expression -> value .)
    AND_OP          reduce using rule 27 (binary_expression -> value .)
    OR_OP           reduce using rule 27 (binary_expression -> value .)
    LE_OP           reduce using rule 27 (binary_expression -> value .)
    GE_OP           reduce using rule 27 (binary_expression -> value .)
    EQ_OP           reduce using rule 27 (binary_expression -> value .)
    NE_OP           reduce using rule 27 (binary_expression -> value .)
    MAJOR           reduce using rule 27 (binary_expression -> value .)
    MINOR           reduce using rule 27 (binary_expression -> value .)
    QUESTION        reduce using rule 27 (binary_expression -> value .)
    R_BRACE         reduce using rule 27 (binary_expression -> value .)
    COMMA           reduce using rule 27 (binary_expression -> value .)
    R_PAREN         reduce using rule 27 (binary_expression -> value .)
    ID              reduce using rule 27 (binary_expression -> value .)
    L_BRACE         reduce using rule 27 (binary_expression -> value .)
    LOOP            reduce using rule 27 (binary_expression -> value .)
    RETURN          reduce using rule 27 (binary_expression -> value .)
    IMPORT          reduce using rule 27 (binary_expression -> value .)
    CONTINUE        reduce using rule 27 (binary_expression -> value .)
    BREAK           reduce using rule 27 (binary_expression -> value .)
    L_PAREN         reduce using rule 27 (binary_expression -> value .)
    NOT             reduce using rule 27 (binary_expression -> value .)
    INT             reduce using rule 27 (binary_expression -> value .)
    FLOAT           reduce using rule 27 (binary_expression -> value .)
    STR             reduce using rule 27 (binary_expression -> value .)
    LEN             reduce using rule 27 (binary_expression -> value .)
    NULL            reduce using rule 27 (binary_expression -> value .)
    L_BRACKET       reduce using rule 27 (binary_expression -> value .)
    SEMICOLON       reduce using rule 27 (binary_expression -> value .)
    R_BRACKET       reduce using rule 27 (binary_expression -> value .)
    COLON           reduce using rule 27 (binary_expression -> value .)
    REM             shift and go to state 63


state 22

    (78) value -> FLOAT .

    REM             reduce using rule 78 (value -> FLOAT .)
    ADD             reduce using rule 78 (value -> FLOAT .)
    SUB             reduce using rule 78 (value -> FLOAT .)
    MUL             reduce using rule 78 (value -> FLOAT .)
    DIV             reduce using rule 78 (value -> FLOAT .)
    EXP             reduce using rule 78 (value -> FLOAT .)
    AND             reduce using rule 78 (value -> FLOAT .)
    OR              reduce using rule 78 (value -> FLOAT .)
    XOR             reduce using rule 78 (value -> FLOAT .)
    MOD             reduce using rule 78 (value -> FLOAT .)
    RIGHT_OP        reduce using rule 78 (value -> FLOAT .)
    LEFT_OP         reduce using rule 78 (value -> FLOAT .)
    NOT_OP          reduce using rule 78 (value -> FLOAT .)
    AND_OP          reduce using rule 78 (value -> FLOAT .)
    OR_OP           reduce using rule 78 (value -> FLOAT .)
    LE_OP           reduce using rule 78 (value -> FLOAT .)
    GE_OP           reduce using rule 78 (value -> FLOAT .)
    EQ_OP           reduce using rule 78 (value -> FLOAT .)
    NE_OP           reduce using rule 78 (value -> FLOAT .)
    MAJOR           reduce using rule 78 (value -> FLOAT .)
    MINOR           reduce using rule 78 (value -> FLOAT .)
    QUESTION        reduce using rule 78 (value -> FLOAT .)
    R_BRACKET       reduce using rule 78 (value -> FLOAT .)
    R_PAREN         reduce using rule 78 (value -> FLOAT .)
    COMMA           reduce using rule 78 (value -> FLOAT .)
    COLON           reduce using rule 78 (value -> FLOAT .)
    ID              reduce using rule 78 (value -> FLOAT .)
    L_BRACE         reduce using rule 78 (value -> FLOAT .)
    LOOP            reduce using rule 78 (value -> FLOAT .)
    RETURN          reduce using rule 78 (value -> FLOAT .)
    IMPORT          reduce using rule 78 (value -> FLOAT .)
    CONTINUE        reduce using rule 78 (value -> FLOAT .)
    BREAK           reduce using rule 78 (value -> FLOAT .)
    L_PAREN         reduce using rule 78 (value -> FLOAT .)
    NOT             reduce using rule 78 (value -> FLOAT .)
    INT             reduce using rule 78 (value -> FLOAT .)
    FLOAT           reduce using rule 78 (value -> FLOAT .)
    STR             reduce using rule 78 (value -> FLOAT .)
    LEN             reduce using rule 78 (value -> FLOAT .)
    NULL            reduce using rule 78 (value -> FLOAT .)
    L_BRACKET       reduce using rule 78 (value -> FLOAT .)
    SEMICOLON       reduce using rule 78 (value -> FLOAT .)
    R_BRACE         reduce using rule 78 (value -> FLOAT .)


state 23

    (85) value -> NULL .

    REM             reduce using rule 85 (value -> NULL .)
    ADD             reduce using rule 85 (value -> NULL .)
    SUB             reduce using rule 85 (value -> NULL .)
    MUL             reduce using rule 85 (value -> NULL .)
    DIV             reduce using rule 85 (value -> NULL .)
    EXP             reduce using rule 85 (value -> NULL .)
    AND             reduce using rule 85 (value -> NULL .)
    OR              reduce using rule 85 (value -> NULL .)
    XOR             reduce using rule 85 (value -> NULL .)
    MOD             reduce using rule 85 (value -> NULL .)
    RIGHT_OP        reduce using rule 85 (value -> NULL .)
    LEFT_OP         reduce using rule 85 (value -> NULL .)
    NOT_OP          reduce using rule 85 (value -> NULL .)
    AND_OP          reduce using rule 85 (value -> NULL .)
    OR_OP           reduce using rule 85 (value -> NULL .)
    LE_OP           reduce using rule 85 (value -> NULL .)
    GE_OP           reduce using rule 85 (value -> NULL .)
    EQ_OP           reduce using rule 85 (value -> NULL .)
    NE_OP           reduce using rule 85 (value -> NULL .)
    MAJOR           reduce using rule 85 (value -> NULL .)
    MINOR           reduce using rule 85 (value -> NULL .)
    QUESTION        reduce using rule 85 (value -> NULL .)
    R_BRACKET       reduce using rule 85 (value -> NULL .)
    R_PAREN         reduce using rule 85 (value -> NULL .)
    COMMA           reduce using rule 85 (value -> NULL .)
    COLON           reduce using rule 85 (value -> NULL .)
    ID              reduce using rule 85 (value -> NULL .)
    L_BRACE         reduce using rule 85 (value -> NULL .)
    LOOP            reduce using rule 85 (value -> NULL .)
    RETURN          reduce using rule 85 (value -> NULL .)
    IMPORT          reduce using rule 85 (value -> NULL .)
    CONTINUE        reduce using rule 85 (value -> NULL .)
    BREAK           reduce using rule 85 (value -> NULL .)
    L_PAREN         reduce using rule 85 (value -> NULL .)
    NOT             reduce using rule 85 (value -> NULL .)
    INT             reduce using rule 85 (value -> NULL .)
    FLOAT           reduce using rule 85 (value -> NULL .)
    STR             reduce using rule 85 (value -> NULL .)
    LEN             reduce using rule 85 (value -> NULL .)
    NULL            reduce using rule 85 (value -> NULL .)
    L_BRACKET       reduce using rule 85 (value -> NULL .)
    SEMICOLON       reduce using rule 85 (value -> NULL .)
    R_BRACE         reduce using rule 85 (value -> NULL .)


state 24

    (3) task_signature -> ID L_PAREN parameter_list R_PAREN statement .

    ID              reduce using rule 3 (task_signature -> ID L_PAREN parameter_list R_PAREN statement .)
    $end            reduce using rule 3 (task_signature -> ID L_PAREN parameter_list R_PAREN statement .)


state 25

    (19) expression -> hash_def .

    ID              reduce using rule 19 (expression -> hash_def .)
    L_BRACE         reduce using rule 19 (expression -> hash_def .)
    LOOP            reduce using rule 19 (expression -> hash_def .)
    RETURN          reduce using rule 19 (expression -> hash_def .)
    IMPORT          reduce using rule 19 (expression -> hash_def .)
    CONTINUE        reduce using rule 19 (expression -> hash_def .)
    BREAK           reduce using rule 19 (expression -> hash_def .)
    L_PAREN         reduce using rule 19 (expression -> hash_def .)
    ADD             reduce using rule 19 (expression -> hash_def .)
    SUB             reduce using rule 19 (expression -> hash_def .)
    NOT             reduce using rule 19 (expression -> hash_def .)
    INT             reduce using rule 19 (expression -> hash_def .)
    FLOAT           reduce using rule 19 (expression -> hash_def .)
    STR             reduce using rule 19 (expression -> hash_def .)
    LEN             reduce using rule 19 (expression -> hash_def .)
    NULL            reduce using rule 19 (expression -> hash_def .)
    L_BRACKET       reduce using rule 19 (expression -> hash_def .)
    QUESTION        reduce using rule 19 (expression -> hash_def .)
    COMMA           reduce using rule 19 (expression -> hash_def .)
    SEMICOLON       reduce using rule 19 (expression -> hash_def .)
    R_BRACKET       reduce using rule 19 (expression -> hash_def .)
    R_PAREN         reduce using rule 19 (expression -> hash_def .)
    R_BRACE         reduce using rule 19 (expression -> hash_def .)


state 26

    (45) expression_statement -> list_req . assignment_operator expression
    (81) value -> list_req .
    (46) assignment_operator -> . ASSIGN
    (47) assignment_operator -> . MUL_ASSIGN
    (48) assignment_operator -> . DIV_ASSIGN
    (49) assignment_operator -> . ADD_ASSIGN
    (50) assignment_operator -> . SUB_ASSIGN
    (51) assignment_operator -> . EXP_ASSIGN
    (52) assignment_operator -> . LEFT_ASSIGN
    (53) assignment_operator -> . RIGHT_ASSIGN
    (54) assignment_operator -> . AND_ASSIGN
    (55) assignment_operator -> . OR_ASSIGN
    (56) assignment_operator -> . XOR_ASSIGN
    (57) assignment_operator -> . MOD_ASSIGN

    REM             reduce using rule 81 (value -> list_req .)
    ADD             reduce using rule 81 (value -> list_req .)
    SUB             reduce using rule 81 (value -> list_req .)
    MUL             reduce using rule 81 (value -> list_req .)
    DIV             reduce using rule 81 (value -> list_req .)
    EXP             reduce using rule 81 (value -> list_req .)
    AND             reduce using rule 81 (value -> list_req .)
    OR              reduce using rule 81 (value -> list_req .)
    XOR             reduce using rule 81 (value -> list_req .)
    MOD             reduce using rule 81 (value -> list_req .)
    RIGHT_OP        reduce using rule 81 (value -> list_req .)
    LEFT_OP         reduce using rule 81 (value -> list_req .)
    NOT_OP          reduce using rule 81 (value -> list_req .)
    AND_OP          reduce using rule 81 (value -> list_req .)
    OR_OP           reduce using rule 81 (value -> list_req .)
    LE_OP           reduce using rule 81 (value -> list_req .)
    GE_OP           reduce using rule 81 (value -> list_req .)
    EQ_OP           reduce using rule 81 (value -> list_req .)
    NE_OP           reduce using rule 81 (value -> list_req .)
    MAJOR           reduce using rule 81 (value -> list_req .)
    MINOR           reduce using rule 81 (value -> list_req .)
    QUESTION        reduce using rule 81 (value -> list_req .)
    ASSIGN          shift and go to state 73
    MUL_ASSIGN      shift and go to state 75
    DIV_ASSIGN      shift and go to state 66
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 70
    EXP_ASSIGN      shift and go to state 71
    LEFT_ASSIGN     shift and go to state 72
    RIGHT_ASSIGN    shift and go to state 68
    AND_ASSIGN      shift and go to state 69
    OR_ASSIGN       shift and go to state 65
    XOR_ASSIGN      shift and go to state 76
    MOD_ASSIGN      shift and go to state 64

    assignment_operator            shift and go to state 74

state 27

    (20) expression -> hash_rem .

    ID              reduce using rule 20 (expression -> hash_rem .)
    L_BRACE         reduce using rule 20 (expression -> hash_rem .)
    LOOP            reduce using rule 20 (expression -> hash_rem .)
    RETURN          reduce using rule 20 (expression -> hash_rem .)
    IMPORT          reduce using rule 20 (expression -> hash_rem .)
    CONTINUE        reduce using rule 20 (expression -> hash_rem .)
    BREAK           reduce using rule 20 (expression -> hash_rem .)
    L_PAREN         reduce using rule 20 (expression -> hash_rem .)
    ADD             reduce using rule 20 (expression -> hash_rem .)
    SUB             reduce using rule 20 (expression -> hash_rem .)
    NOT             reduce using rule 20 (expression -> hash_rem .)
    INT             reduce using rule 20 (expression -> hash_rem .)
    FLOAT           reduce using rule 20 (expression -> hash_rem .)
    STR             reduce using rule 20 (expression -> hash_rem .)
    LEN             reduce using rule 20 (expression -> hash_rem .)
    NULL            reduce using rule 20 (expression -> hash_rem .)
    L_BRACKET       reduce using rule 20 (expression -> hash_rem .)
    QUESTION        reduce using rule 20 (expression -> hash_rem .)
    COMMA           reduce using rule 20 (expression -> hash_rem .)
    SEMICOLON       reduce using rule 20 (expression -> hash_rem .)
    R_BRACKET       reduce using rule 20 (expression -> hash_rem .)
    R_PAREN         reduce using rule 20 (expression -> hash_rem .)
    R_BRACE         reduce using rule 20 (expression -> hash_rem .)


state 28

    (41) statement -> task_call . SEMICOLON
    (80) value -> task_call .

    SEMICOLON       shift and go to state 77
    REM             reduce using rule 80 (value -> task_call .)
    ADD             reduce using rule 80 (value -> task_call .)
    SUB             reduce using rule 80 (value -> task_call .)
    MUL             reduce using rule 80 (value -> task_call .)
    DIV             reduce using rule 80 (value -> task_call .)
    EXP             reduce using rule 80 (value -> task_call .)
    AND             reduce using rule 80 (value -> task_call .)
    OR              reduce using rule 80 (value -> task_call .)
    XOR             reduce using rule 80 (value -> task_call .)
    MOD             reduce using rule 80 (value -> task_call .)
    RIGHT_OP        reduce using rule 80 (value -> task_call .)
    LEFT_OP         reduce using rule 80 (value -> task_call .)
    NOT_OP          reduce using rule 80 (value -> task_call .)
    AND_OP          reduce using rule 80 (value -> task_call .)
    OR_OP           reduce using rule 80 (value -> task_call .)
    LE_OP           reduce using rule 80 (value -> task_call .)
    GE_OP           reduce using rule 80 (value -> task_call .)
    EQ_OP           reduce using rule 80 (value -> task_call .)
    NE_OP           reduce using rule 80 (value -> task_call .)
    MAJOR           reduce using rule 80 (value -> task_call .)
    MINOR           reduce using rule 80 (value -> task_call .)
    QUESTION        reduce using rule 80 (value -> task_call .)
    COLON           reduce using rule 80 (value -> task_call .)


state 29

    (17) expression -> binary_expression .
    (24) binary_expression -> binary_expression . operator binary_expression
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ID              reduce using rule 17 (expression -> binary_expression .)
    L_BRACE         reduce using rule 17 (expression -> binary_expression .)
    LOOP            reduce using rule 17 (expression -> binary_expression .)
    RETURN          reduce using rule 17 (expression -> binary_expression .)
    IMPORT          reduce using rule 17 (expression -> binary_expression .)
    CONTINUE        reduce using rule 17 (expression -> binary_expression .)
    BREAK           reduce using rule 17 (expression -> binary_expression .)
    L_PAREN         reduce using rule 17 (expression -> binary_expression .)
    NOT             reduce using rule 17 (expression -> binary_expression .)
    INT             reduce using rule 17 (expression -> binary_expression .)
    FLOAT           reduce using rule 17 (expression -> binary_expression .)
    STR             reduce using rule 17 (expression -> binary_expression .)
    LEN             reduce using rule 17 (expression -> binary_expression .)
    NULL            reduce using rule 17 (expression -> binary_expression .)
    L_BRACKET       reduce using rule 17 (expression -> binary_expression .)
    QUESTION        reduce using rule 17 (expression -> binary_expression .)
    COMMA           reduce using rule 17 (expression -> binary_expression .)
    SEMICOLON       reduce using rule 17 (expression -> binary_expression .)
    R_BRACKET       reduce using rule 17 (expression -> binary_expression .)
    R_PAREN         reduce using rule 17 (expression -> binary_expression .)
    R_BRACE         reduce using rule 17 (expression -> binary_expression .)
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

  ! ADD             [ reduce using rule 17 (expression -> binary_expression .) ]
  ! SUB             [ reduce using rule 17 (expression -> binary_expression .) ]

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 30

    (36) statement -> condition_statement .

    OR              reduce using rule 36 (statement -> condition_statement .)
    COLON           reduce using rule 36 (statement -> condition_statement .)
    ID              reduce using rule 36 (statement -> condition_statement .)
    $end            reduce using rule 36 (statement -> condition_statement .)
    R_BRACE         reduce using rule 36 (statement -> condition_statement .)
    L_BRACE         reduce using rule 36 (statement -> condition_statement .)
    LOOP            reduce using rule 36 (statement -> condition_statement .)
    RETURN          reduce using rule 36 (statement -> condition_statement .)
    IMPORT          reduce using rule 36 (statement -> condition_statement .)
    CONTINUE        reduce using rule 36 (statement -> condition_statement .)
    BREAK           reduce using rule 36 (statement -> condition_statement .)
    L_PAREN         reduce using rule 36 (statement -> condition_statement .)
    ADD             reduce using rule 36 (statement -> condition_statement .)
    SUB             reduce using rule 36 (statement -> condition_statement .)
    NOT             reduce using rule 36 (statement -> condition_statement .)
    INT             reduce using rule 36 (statement -> condition_statement .)
    FLOAT           reduce using rule 36 (statement -> condition_statement .)
    STR             reduce using rule 36 (statement -> condition_statement .)
    LEN             reduce using rule 36 (statement -> condition_statement .)
    NULL            reduce using rule 36 (statement -> condition_statement .)
    L_BRACKET       reduce using rule 36 (statement -> condition_statement .)


state 31

    (35) statement -> loop_statement .

    OR              reduce using rule 35 (statement -> loop_statement .)
    COLON           reduce using rule 35 (statement -> loop_statement .)
    ID              reduce using rule 35 (statement -> loop_statement .)
    $end            reduce using rule 35 (statement -> loop_statement .)
    R_BRACE         reduce using rule 35 (statement -> loop_statement .)
    L_BRACE         reduce using rule 35 (statement -> loop_statement .)
    LOOP            reduce using rule 35 (statement -> loop_statement .)
    RETURN          reduce using rule 35 (statement -> loop_statement .)
    IMPORT          reduce using rule 35 (statement -> loop_statement .)
    CONTINUE        reduce using rule 35 (statement -> loop_statement .)
    BREAK           reduce using rule 35 (statement -> loop_statement .)
    L_PAREN         reduce using rule 35 (statement -> loop_statement .)
    ADD             reduce using rule 35 (statement -> loop_statement .)
    SUB             reduce using rule 35 (statement -> loop_statement .)
    NOT             reduce using rule 35 (statement -> loop_statement .)
    INT             reduce using rule 35 (statement -> loop_statement .)
    FLOAT           reduce using rule 35 (statement -> loop_statement .)
    STR             reduce using rule 35 (statement -> loop_statement .)
    LEN             reduce using rule 35 (statement -> loop_statement .)
    NULL            reduce using rule 35 (statement -> loop_statement .)
    L_BRACKET       reduce using rule 35 (statement -> loop_statement .)


state 32

    (44) expression_statement -> ID . assignment_operator expression
    (66) free_function -> ID . ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> ID . ASSIGN IMPORT L_PAREN STR R_PAREN
    (43) external_call -> ID . DOT task_call
    (75) task_call -> ID . L_PAREN value_list R_PAREN
    (28) list_req -> ID . list_req_access
    (21) list_rem -> ID . L_BRACKET OR value R_BRACKET
    (22) list_rem -> ID . L_BRACKET value OR R_BRACKET
    (23) list_rem -> ID . L_BRACKET value OR value R_BRACKET
    (76) value -> ID .
    (46) assignment_operator -> . ASSIGN
    (47) assignment_operator -> . MUL_ASSIGN
    (48) assignment_operator -> . DIV_ASSIGN
    (49) assignment_operator -> . ADD_ASSIGN
    (50) assignment_operator -> . SUB_ASSIGN
    (51) assignment_operator -> . EXP_ASSIGN
    (52) assignment_operator -> . LEFT_ASSIGN
    (53) assignment_operator -> . RIGHT_ASSIGN
    (54) assignment_operator -> . AND_ASSIGN
    (55) assignment_operator -> . OR_ASSIGN
    (56) assignment_operator -> . XOR_ASSIGN
    (57) assignment_operator -> . MOD_ASSIGN
    (29) list_req_access -> . L_BRACKET binary_expression R_BRACKET list_req_access
    (30) list_req_access -> . L_BRACKET binary_expression R_BRACKET

    ASSIGN          shift and go to state 103
    DOT             shift and go to state 105
    L_PAREN         shift and go to state 101
    L_BRACKET       shift and go to state 104
    REM             reduce using rule 76 (value -> ID .)
    ADD             reduce using rule 76 (value -> ID .)
    SUB             reduce using rule 76 (value -> ID .)
    MUL             reduce using rule 76 (value -> ID .)
    DIV             reduce using rule 76 (value -> ID .)
    EXP             reduce using rule 76 (value -> ID .)
    AND             reduce using rule 76 (value -> ID .)
    OR              reduce using rule 76 (value -> ID .)
    XOR             reduce using rule 76 (value -> ID .)
    MOD             reduce using rule 76 (value -> ID .)
    RIGHT_OP        reduce using rule 76 (value -> ID .)
    LEFT_OP         reduce using rule 76 (value -> ID .)
    NOT_OP          reduce using rule 76 (value -> ID .)
    AND_OP          reduce using rule 76 (value -> ID .)
    OR_OP           reduce using rule 76 (value -> ID .)
    LE_OP           reduce using rule 76 (value -> ID .)
    GE_OP           reduce using rule 76 (value -> ID .)
    EQ_OP           reduce using rule 76 (value -> ID .)
    NE_OP           reduce using rule 76 (value -> ID .)
    MAJOR           reduce using rule 76 (value -> ID .)
    MINOR           reduce using rule 76 (value -> ID .)
    QUESTION        reduce using rule 76 (value -> ID .)
    MUL_ASSIGN      shift and go to state 75
    DIV_ASSIGN      shift and go to state 66
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 70
    EXP_ASSIGN      shift and go to state 71
    LEFT_ASSIGN     shift and go to state 72
    RIGHT_ASSIGN    shift and go to state 68
    AND_ASSIGN      shift and go to state 69
    OR_ASSIGN       shift and go to state 65
    XOR_ASSIGN      shift and go to state 76
    MOD_ASSIGN      shift and go to state 64

    assignment_operator            shift and go to state 106
    list_req_access                shift and go to state 102

state 33

    (33) statement -> expression_statement . SEMICOLON

    SEMICOLON       shift and go to state 107


state 34

    (25) binary_expression -> L_PAREN . binary_expression R_PAREN
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 49
    unary_operator                 shift and go to state 11
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 108

state 35

    (65) import_function -> IMPORT . L_PAREN ID R_PAREN

    L_PAREN         shift and go to state 109


state 36

    (58) compound_statement -> L_BRACE . R_BRACE
    (59) compound_statement -> L_BRACE . statement_list R_BRACE
    (70) hash_def -> L_BRACE . key_value_list R_BRACE
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . statement
    (72) key_value_list -> . key_value_list COMMA value COLON expression
    (73) key_value_list -> . value COLON expression
    (74) key_value_list -> . empty
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (109) empty -> .
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT

  ! shift/reduce conflict for R_BRACE resolved as shift
    R_BRACE         shift and go to state 116
    ID              shift and go to state 115
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    COMMA           reduce using rule 109 (empty -> .)
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_BRACKET       shift and go to state 13
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44

  ! R_BRACE         [ reduce using rule 109 (empty -> .) ]

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    list_rem                       shift and go to state 18
    key_value_list                 shift and go to state 117
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    compound_statement             shift and go to state 12
    import_function                shift and go to state 37
    value                          shift and go to state 110
    empty                          shift and go to state 111
    statement                      shift and go to state 112
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 113
    statement_list                 shift and go to state 114
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    free_function                  shift and go to state 43
    list_def                       shift and go to state 16
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    condition_statement            shift and go to state 30

state 37

    (39) statement -> import_function . SEMICOLON

    SEMICOLON       shift and go to state 118


state 38

    (87) unary_operator -> SUB .

    L_PAREN         reduce using rule 87 (unary_operator -> SUB .)
    ADD             reduce using rule 87 (unary_operator -> SUB .)
    SUB             reduce using rule 87 (unary_operator -> SUB .)
    NOT             reduce using rule 87 (unary_operator -> SUB .)
    ID              reduce using rule 87 (unary_operator -> SUB .)
    INT             reduce using rule 87 (unary_operator -> SUB .)
    FLOAT           reduce using rule 87 (unary_operator -> SUB .)
    STR             reduce using rule 87 (unary_operator -> SUB .)
    LEN             reduce using rule 87 (unary_operator -> SUB .)
    NULL            reduce using rule 87 (unary_operator -> SUB .)
    L_BRACKET       reduce using rule 87 (unary_operator -> SUB .)


state 39

    (86) unary_operator -> ADD .

    L_PAREN         reduce using rule 86 (unary_operator -> ADD .)
    ADD             reduce using rule 86 (unary_operator -> ADD .)
    SUB             reduce using rule 86 (unary_operator -> ADD .)
    NOT             reduce using rule 86 (unary_operator -> ADD .)
    ID              reduce using rule 86 (unary_operator -> ADD .)
    INT             reduce using rule 86 (unary_operator -> ADD .)
    FLOAT           reduce using rule 86 (unary_operator -> ADD .)
    STR             reduce using rule 86 (unary_operator -> ADD .)
    LEN             reduce using rule 86 (unary_operator -> ADD .)
    NULL            reduce using rule 86 (unary_operator -> ADD .)
    L_BRACKET       reduce using rule 86 (unary_operator -> ADD .)


state 40

    (84) value -> LEN . value
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 119
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51

state 41

    (62) loop_flows -> CONTINUE .

    SEMICOLON       reduce using rule 62 (loop_flows -> CONTINUE .)


state 42

    (40) statement -> external_call . SEMICOLON
    (82) value -> external_call .

    SEMICOLON       shift and go to state 120
    REM             reduce using rule 82 (value -> external_call .)
    ADD             reduce using rule 82 (value -> external_call .)
    SUB             reduce using rule 82 (value -> external_call .)
    MUL             reduce using rule 82 (value -> external_call .)
    DIV             reduce using rule 82 (value -> external_call .)
    EXP             reduce using rule 82 (value -> external_call .)
    AND             reduce using rule 82 (value -> external_call .)
    OR              reduce using rule 82 (value -> external_call .)
    XOR             reduce using rule 82 (value -> external_call .)
    MOD             reduce using rule 82 (value -> external_call .)
    RIGHT_OP        reduce using rule 82 (value -> external_call .)
    LEFT_OP         reduce using rule 82 (value -> external_call .)
    NOT_OP          reduce using rule 82 (value -> external_call .)
    AND_OP          reduce using rule 82 (value -> external_call .)
    OR_OP           reduce using rule 82 (value -> external_call .)
    LE_OP           reduce using rule 82 (value -> external_call .)
    GE_OP           reduce using rule 82 (value -> external_call .)
    EQ_OP           reduce using rule 82 (value -> external_call .)
    NE_OP           reduce using rule 82 (value -> external_call .)
    MAJOR           reduce using rule 82 (value -> external_call .)
    MINOR           reduce using rule 82 (value -> external_call .)
    QUESTION        reduce using rule 82 (value -> external_call .)
    COLON           reduce using rule 82 (value -> external_call .)


state 43

    (38) statement -> free_function . SEMICOLON

    SEMICOLON       shift and go to state 121


state 44

    (88) unary_operator -> NOT .

    L_PAREN         reduce using rule 88 (unary_operator -> NOT .)
    ADD             reduce using rule 88 (unary_operator -> NOT .)
    SUB             reduce using rule 88 (unary_operator -> NOT .)
    NOT             reduce using rule 88 (unary_operator -> NOT .)
    ID              reduce using rule 88 (unary_operator -> NOT .)
    INT             reduce using rule 88 (unary_operator -> NOT .)
    FLOAT           reduce using rule 88 (unary_operator -> NOT .)
    STR             reduce using rule 88 (unary_operator -> NOT .)
    LEN             reduce using rule 88 (unary_operator -> NOT .)
    NULL            reduce using rule 88 (unary_operator -> NOT .)
    L_BRACKET       reduce using rule 88 (unary_operator -> NOT .)


state 45

    (79) value -> STR .

    REM             reduce using rule 79 (value -> STR .)
    ADD             reduce using rule 79 (value -> STR .)
    SUB             reduce using rule 79 (value -> STR .)
    MUL             reduce using rule 79 (value -> STR .)
    DIV             reduce using rule 79 (value -> STR .)
    EXP             reduce using rule 79 (value -> STR .)
    AND             reduce using rule 79 (value -> STR .)
    OR              reduce using rule 79 (value -> STR .)
    XOR             reduce using rule 79 (value -> STR .)
    MOD             reduce using rule 79 (value -> STR .)
    RIGHT_OP        reduce using rule 79 (value -> STR .)
    LEFT_OP         reduce using rule 79 (value -> STR .)
    NOT_OP          reduce using rule 79 (value -> STR .)
    AND_OP          reduce using rule 79 (value -> STR .)
    OR_OP           reduce using rule 79 (value -> STR .)
    LE_OP           reduce using rule 79 (value -> STR .)
    GE_OP           reduce using rule 79 (value -> STR .)
    EQ_OP           reduce using rule 79 (value -> STR .)
    NE_OP           reduce using rule 79 (value -> STR .)
    MAJOR           reduce using rule 79 (value -> STR .)
    MINOR           reduce using rule 79 (value -> STR .)
    QUESTION        reduce using rule 79 (value -> STR .)
    R_BRACKET       reduce using rule 79 (value -> STR .)
    R_PAREN         reduce using rule 79 (value -> STR .)
    COMMA           reduce using rule 79 (value -> STR .)
    COLON           reduce using rule 79 (value -> STR .)
    ID              reduce using rule 79 (value -> STR .)
    L_BRACE         reduce using rule 79 (value -> STR .)
    LOOP            reduce using rule 79 (value -> STR .)
    RETURN          reduce using rule 79 (value -> STR .)
    IMPORT          reduce using rule 79 (value -> STR .)
    CONTINUE        reduce using rule 79 (value -> STR .)
    BREAK           reduce using rule 79 (value -> STR .)
    L_PAREN         reduce using rule 79 (value -> STR .)
    NOT             reduce using rule 79 (value -> STR .)
    INT             reduce using rule 79 (value -> STR .)
    FLOAT           reduce using rule 79 (value -> STR .)
    STR             reduce using rule 79 (value -> STR .)
    LEN             reduce using rule 79 (value -> STR .)
    NULL            reduce using rule 79 (value -> STR .)
    L_BRACKET       reduce using rule 79 (value -> STR .)
    SEMICOLON       reduce using rule 79 (value -> STR .)
    R_BRACE         reduce using rule 79 (value -> STR .)


state 46

    (7) loop_statement -> LOOP . expression statement
    (8) loop_statement -> LOOP . ID COMMA expression COMMA value statement
    (9) loop_statement -> LOOP . ID COMMA expression statement
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 123
    L_PAREN         shift and go to state 34
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    expression                     shift and go to state 122
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    task_call                      shift and go to state 51
    external_call                  shift and go to state 54

state 47

    (67) return_command -> RETURN . L_PAREN expression R_PAREN SEMICOLON

    L_PAREN         shift and go to state 124


state 48

    (4) parameter_list -> ID COMMA parameter_list .

    R_PAREN         reduce using rule 4 (parameter_list -> ID COMMA parameter_list .)


state 49

    (27) binary_expression -> value .

    R_BRACKET       reduce using rule 27 (binary_expression -> value .)
    ADD             reduce using rule 27 (binary_expression -> value .)
    SUB             reduce using rule 27 (binary_expression -> value .)
    MUL             reduce using rule 27 (binary_expression -> value .)
    DIV             reduce using rule 27 (binary_expression -> value .)
    EXP             reduce using rule 27 (binary_expression -> value .)
    AND             reduce using rule 27 (binary_expression -> value .)
    OR              reduce using rule 27 (binary_expression -> value .)
    XOR             reduce using rule 27 (binary_expression -> value .)
    MOD             reduce using rule 27 (binary_expression -> value .)
    RIGHT_OP        reduce using rule 27 (binary_expression -> value .)
    LEFT_OP         reduce using rule 27 (binary_expression -> value .)
    NOT_OP          reduce using rule 27 (binary_expression -> value .)
    AND_OP          reduce using rule 27 (binary_expression -> value .)
    OR_OP           reduce using rule 27 (binary_expression -> value .)
    LE_OP           reduce using rule 27 (binary_expression -> value .)
    GE_OP           reduce using rule 27 (binary_expression -> value .)
    EQ_OP           reduce using rule 27 (binary_expression -> value .)
    NE_OP           reduce using rule 27 (binary_expression -> value .)
    MAJOR           reduce using rule 27 (binary_expression -> value .)
    MINOR           reduce using rule 27 (binary_expression -> value .)
    QUESTION        reduce using rule 27 (binary_expression -> value .)
    COLON           reduce using rule 27 (binary_expression -> value .)
    COMMA           reduce using rule 27 (binary_expression -> value .)
    R_PAREN         reduce using rule 27 (binary_expression -> value .)
    ID              reduce using rule 27 (binary_expression -> value .)
    L_BRACE         reduce using rule 27 (binary_expression -> value .)
    LOOP            reduce using rule 27 (binary_expression -> value .)
    RETURN          reduce using rule 27 (binary_expression -> value .)
    IMPORT          reduce using rule 27 (binary_expression -> value .)
    CONTINUE        reduce using rule 27 (binary_expression -> value .)
    BREAK           reduce using rule 27 (binary_expression -> value .)
    L_PAREN         reduce using rule 27 (binary_expression -> value .)
    NOT             reduce using rule 27 (binary_expression -> value .)
    INT             reduce using rule 27 (binary_expression -> value .)
    FLOAT           reduce using rule 27 (binary_expression -> value .)
    STR             reduce using rule 27 (binary_expression -> value .)
    LEN             reduce using rule 27 (binary_expression -> value .)
    NULL            reduce using rule 27 (binary_expression -> value .)
    L_BRACKET       reduce using rule 27 (binary_expression -> value .)
    SEMICOLON       reduce using rule 27 (binary_expression -> value .)
    R_BRACE         reduce using rule 27 (binary_expression -> value .)


state 50

    (81) value -> list_req .

    OR              reduce using rule 81 (value -> list_req .)
    R_BRACKET       reduce using rule 81 (value -> list_req .)
    ADD             reduce using rule 81 (value -> list_req .)
    SUB             reduce using rule 81 (value -> list_req .)
    MUL             reduce using rule 81 (value -> list_req .)
    DIV             reduce using rule 81 (value -> list_req .)
    EXP             reduce using rule 81 (value -> list_req .)
    AND             reduce using rule 81 (value -> list_req .)
    XOR             reduce using rule 81 (value -> list_req .)
    MOD             reduce using rule 81 (value -> list_req .)
    RIGHT_OP        reduce using rule 81 (value -> list_req .)
    LEFT_OP         reduce using rule 81 (value -> list_req .)
    NOT_OP          reduce using rule 81 (value -> list_req .)
    AND_OP          reduce using rule 81 (value -> list_req .)
    OR_OP           reduce using rule 81 (value -> list_req .)
    LE_OP           reduce using rule 81 (value -> list_req .)
    GE_OP           reduce using rule 81 (value -> list_req .)
    EQ_OP           reduce using rule 81 (value -> list_req .)
    NE_OP           reduce using rule 81 (value -> list_req .)
    MAJOR           reduce using rule 81 (value -> list_req .)
    MINOR           reduce using rule 81 (value -> list_req .)
    QUESTION        reduce using rule 81 (value -> list_req .)
    REM             reduce using rule 81 (value -> list_req .)
    R_PAREN         reduce using rule 81 (value -> list_req .)
    COMMA           reduce using rule 81 (value -> list_req .)
    COLON           reduce using rule 81 (value -> list_req .)
    ID              reduce using rule 81 (value -> list_req .)
    L_BRACE         reduce using rule 81 (value -> list_req .)
    LOOP            reduce using rule 81 (value -> list_req .)
    RETURN          reduce using rule 81 (value -> list_req .)
    IMPORT          reduce using rule 81 (value -> list_req .)
    CONTINUE        reduce using rule 81 (value -> list_req .)
    BREAK           reduce using rule 81 (value -> list_req .)
    L_PAREN         reduce using rule 81 (value -> list_req .)
    NOT             reduce using rule 81 (value -> list_req .)
    INT             reduce using rule 81 (value -> list_req .)
    FLOAT           reduce using rule 81 (value -> list_req .)
    STR             reduce using rule 81 (value -> list_req .)
    LEN             reduce using rule 81 (value -> list_req .)
    NULL            reduce using rule 81 (value -> list_req .)
    L_BRACKET       reduce using rule 81 (value -> list_req .)
    SEMICOLON       reduce using rule 81 (value -> list_req .)
    R_BRACE         reduce using rule 81 (value -> list_req .)


state 51

    (80) value -> task_call .

    OR              reduce using rule 80 (value -> task_call .)
    R_BRACKET       reduce using rule 80 (value -> task_call .)
    ADD             reduce using rule 80 (value -> task_call .)
    SUB             reduce using rule 80 (value -> task_call .)
    MUL             reduce using rule 80 (value -> task_call .)
    DIV             reduce using rule 80 (value -> task_call .)
    EXP             reduce using rule 80 (value -> task_call .)
    AND             reduce using rule 80 (value -> task_call .)
    XOR             reduce using rule 80 (value -> task_call .)
    MOD             reduce using rule 80 (value -> task_call .)
    RIGHT_OP        reduce using rule 80 (value -> task_call .)
    LEFT_OP         reduce using rule 80 (value -> task_call .)
    NOT_OP          reduce using rule 80 (value -> task_call .)
    AND_OP          reduce using rule 80 (value -> task_call .)
    OR_OP           reduce using rule 80 (value -> task_call .)
    LE_OP           reduce using rule 80 (value -> task_call .)
    GE_OP           reduce using rule 80 (value -> task_call .)
    EQ_OP           reduce using rule 80 (value -> task_call .)
    NE_OP           reduce using rule 80 (value -> task_call .)
    MAJOR           reduce using rule 80 (value -> task_call .)
    MINOR           reduce using rule 80 (value -> task_call .)
    QUESTION        reduce using rule 80 (value -> task_call .)
    REM             reduce using rule 80 (value -> task_call .)
    R_PAREN         reduce using rule 80 (value -> task_call .)
    COMMA           reduce using rule 80 (value -> task_call .)
    COLON           reduce using rule 80 (value -> task_call .)
    ID              reduce using rule 80 (value -> task_call .)
    L_BRACE         reduce using rule 80 (value -> task_call .)
    LOOP            reduce using rule 80 (value -> task_call .)
    RETURN          reduce using rule 80 (value -> task_call .)
    IMPORT          reduce using rule 80 (value -> task_call .)
    CONTINUE        reduce using rule 80 (value -> task_call .)
    BREAK           reduce using rule 80 (value -> task_call .)
    L_PAREN         reduce using rule 80 (value -> task_call .)
    NOT             reduce using rule 80 (value -> task_call .)
    INT             reduce using rule 80 (value -> task_call .)
    FLOAT           reduce using rule 80 (value -> task_call .)
    STR             reduce using rule 80 (value -> task_call .)
    LEN             reduce using rule 80 (value -> task_call .)
    NULL            reduce using rule 80 (value -> task_call .)
    L_BRACKET       reduce using rule 80 (value -> task_call .)
    SEMICOLON       reduce using rule 80 (value -> task_call .)
    R_BRACE         reduce using rule 80 (value -> task_call .)


state 52

    (26) binary_expression -> unary_operator binary_expression .
    (24) binary_expression -> binary_expression . operator binary_expression
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for NOT_OP resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
  ! shift/reduce conflict for LE_OP resolved as shift
  ! shift/reduce conflict for GE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
  ! shift/reduce conflict for MAJOR resolved as shift
  ! shift/reduce conflict for MINOR resolved as shift
    QUESTION        reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    R_BRACKET       reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    R_BRACE         reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    COMMA           reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    R_PAREN         reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    ID              reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    L_BRACE         reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    LOOP            reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    RETURN          reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    IMPORT          reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    CONTINUE        reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    BREAK           reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    L_PAREN         reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    NOT             reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    INT             reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    FLOAT           reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    STR             reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    LEN             reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    NULL            reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    L_BRACKET       reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    SEMICOLON       reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    COLON           reduce using rule 26 (binary_expression -> unary_operator binary_expression .)
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

  ! ADD             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! SUB             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! MUL             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! DIV             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! EXP             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! AND             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! OR              [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! XOR             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! MOD             [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! NOT_OP          [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! AND_OP          [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! OR_OP           [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! LE_OP           [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! GE_OP           [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! EQ_OP           [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! NE_OP           [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! MAJOR           [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]
  ! MINOR           [ reduce using rule 26 (binary_expression -> unary_operator binary_expression .) ]

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 53

    (76) value -> ID .
    (75) task_call -> ID . L_PAREN value_list R_PAREN
    (28) list_req -> ID . list_req_access
    (43) external_call -> ID . DOT task_call
    (29) list_req_access -> . L_BRACKET binary_expression R_BRACKET list_req_access
    (30) list_req_access -> . L_BRACKET binary_expression R_BRACKET

  ! shift/reduce conflict for L_PAREN resolved as shift
  ! shift/reduce conflict for L_BRACKET resolved as shift
    OR              reduce using rule 76 (value -> ID .)
    R_BRACKET       reduce using rule 76 (value -> ID .)
    ADD             reduce using rule 76 (value -> ID .)
    SUB             reduce using rule 76 (value -> ID .)
    MUL             reduce using rule 76 (value -> ID .)
    DIV             reduce using rule 76 (value -> ID .)
    EXP             reduce using rule 76 (value -> ID .)
    AND             reduce using rule 76 (value -> ID .)
    XOR             reduce using rule 76 (value -> ID .)
    MOD             reduce using rule 76 (value -> ID .)
    RIGHT_OP        reduce using rule 76 (value -> ID .)
    LEFT_OP         reduce using rule 76 (value -> ID .)
    NOT_OP          reduce using rule 76 (value -> ID .)
    AND_OP          reduce using rule 76 (value -> ID .)
    OR_OP           reduce using rule 76 (value -> ID .)
    LE_OP           reduce using rule 76 (value -> ID .)
    GE_OP           reduce using rule 76 (value -> ID .)
    EQ_OP           reduce using rule 76 (value -> ID .)
    NE_OP           reduce using rule 76 (value -> ID .)
    MAJOR           reduce using rule 76 (value -> ID .)
    MINOR           reduce using rule 76 (value -> ID .)
    QUESTION        reduce using rule 76 (value -> ID .)
    REM             reduce using rule 76 (value -> ID .)
    COLON           reduce using rule 76 (value -> ID .)
    COMMA           reduce using rule 76 (value -> ID .)
    R_PAREN         reduce using rule 76 (value -> ID .)
    ID              reduce using rule 76 (value -> ID .)
    L_BRACE         reduce using rule 76 (value -> ID .)
    LOOP            reduce using rule 76 (value -> ID .)
    RETURN          reduce using rule 76 (value -> ID .)
    IMPORT          reduce using rule 76 (value -> ID .)
    CONTINUE        reduce using rule 76 (value -> ID .)
    BREAK           reduce using rule 76 (value -> ID .)
    NOT             reduce using rule 76 (value -> ID .)
    INT             reduce using rule 76 (value -> ID .)
    FLOAT           reduce using rule 76 (value -> ID .)
    STR             reduce using rule 76 (value -> ID .)
    LEN             reduce using rule 76 (value -> ID .)
    NULL            reduce using rule 76 (value -> ID .)
    SEMICOLON       reduce using rule 76 (value -> ID .)
    R_BRACE         reduce using rule 76 (value -> ID .)
    L_PAREN         shift and go to state 101
    DOT             shift and go to state 105
    L_BRACKET       shift and go to state 125

  ! L_PAREN         [ reduce using rule 76 (value -> ID .) ]
  ! L_BRACKET       [ reduce using rule 76 (value -> ID .) ]

    list_req_access                shift and go to state 102

state 54

    (82) value -> external_call .

    OR              reduce using rule 82 (value -> external_call .)
    R_BRACKET       reduce using rule 82 (value -> external_call .)
    ADD             reduce using rule 82 (value -> external_call .)
    SUB             reduce using rule 82 (value -> external_call .)
    MUL             reduce using rule 82 (value -> external_call .)
    DIV             reduce using rule 82 (value -> external_call .)
    EXP             reduce using rule 82 (value -> external_call .)
    AND             reduce using rule 82 (value -> external_call .)
    XOR             reduce using rule 82 (value -> external_call .)
    MOD             reduce using rule 82 (value -> external_call .)
    RIGHT_OP        reduce using rule 82 (value -> external_call .)
    LEFT_OP         reduce using rule 82 (value -> external_call .)
    NOT_OP          reduce using rule 82 (value -> external_call .)
    AND_OP          reduce using rule 82 (value -> external_call .)
    OR_OP           reduce using rule 82 (value -> external_call .)
    LE_OP           reduce using rule 82 (value -> external_call .)
    GE_OP           reduce using rule 82 (value -> external_call .)
    EQ_OP           reduce using rule 82 (value -> external_call .)
    NE_OP           reduce using rule 82 (value -> external_call .)
    MAJOR           reduce using rule 82 (value -> external_call .)
    MINOR           reduce using rule 82 (value -> external_call .)
    QUESTION        reduce using rule 82 (value -> external_call .)
    REM             reduce using rule 82 (value -> external_call .)
    R_PAREN         reduce using rule 82 (value -> external_call .)
    COMMA           reduce using rule 82 (value -> external_call .)
    COLON           reduce using rule 82 (value -> external_call .)
    ID              reduce using rule 82 (value -> external_call .)
    L_BRACE         reduce using rule 82 (value -> external_call .)
    LOOP            reduce using rule 82 (value -> external_call .)
    RETURN          reduce using rule 82 (value -> external_call .)
    IMPORT          reduce using rule 82 (value -> external_call .)
    CONTINUE        reduce using rule 82 (value -> external_call .)
    BREAK           reduce using rule 82 (value -> external_call .)
    L_PAREN         reduce using rule 82 (value -> external_call .)
    NOT             reduce using rule 82 (value -> external_call .)
    INT             reduce using rule 82 (value -> external_call .)
    FLOAT           reduce using rule 82 (value -> external_call .)
    STR             reduce using rule 82 (value -> external_call .)
    LEN             reduce using rule 82 (value -> external_call .)
    NULL            reduce using rule 82 (value -> external_call .)
    L_BRACKET       reduce using rule 82 (value -> external_call .)
    SEMICOLON       reduce using rule 82 (value -> external_call .)
    R_BRACE         reduce using rule 82 (value -> external_call .)


state 55

    (70) hash_def -> L_BRACE . key_value_list R_BRACE
    (72) key_value_list -> . key_value_list COMMA value COLON expression
    (73) key_value_list -> . value COLON expression
    (74) key_value_list -> . empty
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (109) empty -> .
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    R_BRACE         reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 126
    empty                          shift and go to state 111
    list_req                       shift and go to state 50
    key_value_list                 shift and go to state 117
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    list_def                       shift and go to state 16

state 56

    (15) value_list -> expression .

    R_BRACKET       reduce using rule 15 (value_list -> expression .)
    COMMA           reduce using rule 15 (value_list -> expression .)
    R_PAREN         reduce using rule 15 (value_list -> expression .)


state 57

    (69) list_def -> L_BRACKET value_list . R_BRACKET
    (14) value_list -> value_list . COMMA expression

    R_BRACKET       shift and go to state 128
    COMMA           shift and go to state 127


state 58

    (76) value -> ID .
    (75) task_call -> ID . L_PAREN value_list R_PAREN
    (28) list_req -> ID . list_req_access
    (43) external_call -> ID . DOT task_call
    (21) list_rem -> ID . L_BRACKET OR value R_BRACKET
    (22) list_rem -> ID . L_BRACKET value OR R_BRACKET
    (23) list_rem -> ID . L_BRACKET value OR value R_BRACKET
    (29) list_req_access -> . L_BRACKET binary_expression R_BRACKET list_req_access
    (30) list_req_access -> . L_BRACKET binary_expression R_BRACKET

    REM             reduce using rule 76 (value -> ID .)
    COLON           reduce using rule 76 (value -> ID .)
    ADD             reduce using rule 76 (value -> ID .)
    SUB             reduce using rule 76 (value -> ID .)
    MUL             reduce using rule 76 (value -> ID .)
    DIV             reduce using rule 76 (value -> ID .)
    EXP             reduce using rule 76 (value -> ID .)
    AND             reduce using rule 76 (value -> ID .)
    OR              reduce using rule 76 (value -> ID .)
    XOR             reduce using rule 76 (value -> ID .)
    MOD             reduce using rule 76 (value -> ID .)
    RIGHT_OP        reduce using rule 76 (value -> ID .)
    LEFT_OP         reduce using rule 76 (value -> ID .)
    NOT_OP          reduce using rule 76 (value -> ID .)
    AND_OP          reduce using rule 76 (value -> ID .)
    OR_OP           reduce using rule 76 (value -> ID .)
    LE_OP           reduce using rule 76 (value -> ID .)
    GE_OP           reduce using rule 76 (value -> ID .)
    EQ_OP           reduce using rule 76 (value -> ID .)
    NE_OP           reduce using rule 76 (value -> ID .)
    MAJOR           reduce using rule 76 (value -> ID .)
    MINOR           reduce using rule 76 (value -> ID .)
    R_BRACKET       reduce using rule 76 (value -> ID .)
    COMMA           reduce using rule 76 (value -> ID .)
    L_PAREN         shift and go to state 101
    DOT             shift and go to state 105
    L_BRACKET       shift and go to state 104

    list_req_access                shift and go to state 102

state 59

    (16) value_list -> empty .

    R_BRACKET       reduce using rule 16 (value_list -> empty .)
    COMMA           reduce using rule 16 (value_list -> empty .)
    R_PAREN         reduce using rule 16 (value_list -> empty .)


state 60

    (68) list_def -> L_BRACKET binary_expression . COLON binary_expression R_BRACKET
    (24) binary_expression -> binary_expression . operator binary_expression
    (17) expression -> binary_expression .
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

    COLON           shift and go to state 129
    R_BRACKET       reduce using rule 17 (expression -> binary_expression .)
    COMMA           reduce using rule 17 (expression -> binary_expression .)
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 61

    (10) condition_statement -> expression QUESTION . statement more_condition
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    compound_statement             shift and go to state 12
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    list_rem                       shift and go to state 18
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 130
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    free_function                  shift and go to state 43
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 62

    (42) statement -> loop_flows SEMICOLON .

    OR              reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    COLON           reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    ID              reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    $end            reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    R_BRACE         reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    L_BRACE         reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    LOOP            reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    RETURN          reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    IMPORT          reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    CONTINUE        reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    BREAK           reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    L_PAREN         reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    ADD             reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    SUB             reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    NOT             reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    INT             reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    FLOAT           reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    STR             reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    LEN             reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    NULL            reduce using rule 42 (statement -> loop_flows SEMICOLON .)
    L_BRACKET       reduce using rule 42 (statement -> loop_flows SEMICOLON .)


state 63

    (71) hash_rem -> value REM . list_def
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_BRACKET       shift and go to state 13

    list_def                       shift and go to state 131

state 64

    (57) assignment_operator -> MOD_ASSIGN .

    L_PAREN         reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    ID              reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    L_BRACE         reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    ADD             reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    SUB             reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    NOT             reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    INT             reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    FLOAT           reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    STR             reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    LEN             reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    NULL            reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)
    L_BRACKET       reduce using rule 57 (assignment_operator -> MOD_ASSIGN .)


state 65

    (55) assignment_operator -> OR_ASSIGN .

    L_PAREN         reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    ID              reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    L_BRACE         reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    ADD             reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    SUB             reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    INT             reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    FLOAT           reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    STR             reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    LEN             reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    NULL            reduce using rule 55 (assignment_operator -> OR_ASSIGN .)
    L_BRACKET       reduce using rule 55 (assignment_operator -> OR_ASSIGN .)


state 66

    (48) assignment_operator -> DIV_ASSIGN .

    L_PAREN         reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    ID              reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    L_BRACE         reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    ADD             reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    SUB             reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    NOT             reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    INT             reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    FLOAT           reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    STR             reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    LEN             reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    NULL            reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)
    L_BRACKET       reduce using rule 48 (assignment_operator -> DIV_ASSIGN .)


state 67

    (49) assignment_operator -> ADD_ASSIGN .

    L_PAREN         reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    ID              reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    L_BRACE         reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    ADD             reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    SUB             reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    NOT             reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    INT             reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    FLOAT           reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    STR             reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    LEN             reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    NULL            reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)
    L_BRACKET       reduce using rule 49 (assignment_operator -> ADD_ASSIGN .)


state 68

    (53) assignment_operator -> RIGHT_ASSIGN .

    L_PAREN         reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    ID              reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    L_BRACE         reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    ADD             reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    SUB             reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    NOT             reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    INT             reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    FLOAT           reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    STR             reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    LEN             reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    NULL            reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)
    L_BRACKET       reduce using rule 53 (assignment_operator -> RIGHT_ASSIGN .)


state 69

    (54) assignment_operator -> AND_ASSIGN .

    L_PAREN         reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    ID              reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    L_BRACE         reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    ADD             reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    SUB             reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    INT             reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    FLOAT           reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    STR             reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    LEN             reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    NULL            reduce using rule 54 (assignment_operator -> AND_ASSIGN .)
    L_BRACKET       reduce using rule 54 (assignment_operator -> AND_ASSIGN .)


state 70

    (50) assignment_operator -> SUB_ASSIGN .

    L_PAREN         reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    ID              reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    L_BRACE         reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    ADD             reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    SUB             reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    NOT             reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    INT             reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    FLOAT           reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    STR             reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    LEN             reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    NULL            reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)
    L_BRACKET       reduce using rule 50 (assignment_operator -> SUB_ASSIGN .)


state 71

    (51) assignment_operator -> EXP_ASSIGN .

    L_PAREN         reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    ID              reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    L_BRACE         reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    ADD             reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    SUB             reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    NOT             reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    INT             reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    FLOAT           reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    STR             reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    LEN             reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    NULL            reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)
    L_BRACKET       reduce using rule 51 (assignment_operator -> EXP_ASSIGN .)


state 72

    (52) assignment_operator -> LEFT_ASSIGN .

    L_PAREN         reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    ID              reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    L_BRACE         reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    ADD             reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    SUB             reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    NOT             reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    INT             reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    FLOAT           reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    STR             reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    LEN             reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    NULL            reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)
    L_BRACKET       reduce using rule 52 (assignment_operator -> LEFT_ASSIGN .)


state 73

    (46) assignment_operator -> ASSIGN .

    L_PAREN         reduce using rule 46 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 46 (assignment_operator -> ASSIGN .)
    L_BRACE         reduce using rule 46 (assignment_operator -> ASSIGN .)
    ADD             reduce using rule 46 (assignment_operator -> ASSIGN .)
    SUB             reduce using rule 46 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 46 (assignment_operator -> ASSIGN .)
    INT             reduce using rule 46 (assignment_operator -> ASSIGN .)
    FLOAT           reduce using rule 46 (assignment_operator -> ASSIGN .)
    STR             reduce using rule 46 (assignment_operator -> ASSIGN .)
    LEN             reduce using rule 46 (assignment_operator -> ASSIGN .)
    NULL            reduce using rule 46 (assignment_operator -> ASSIGN .)
    L_BRACKET       reduce using rule 46 (assignment_operator -> ASSIGN .)


state 74

    (45) expression_statement -> list_req assignment_operator . expression
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    expression                     shift and go to state 132
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    task_call                      shift and go to state 51
    external_call                  shift and go to state 54

state 75

    (47) assignment_operator -> MUL_ASSIGN .

    L_PAREN         reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    ID              reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    L_BRACE         reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    ADD             reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    SUB             reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    NOT             reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    INT             reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    FLOAT           reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    STR             reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    LEN             reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    NULL            reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)
    L_BRACKET       reduce using rule 47 (assignment_operator -> MUL_ASSIGN .)


state 76

    (56) assignment_operator -> XOR_ASSIGN .

    L_PAREN         reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    ID              reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    L_BRACE         reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    ADD             reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    SUB             reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    INT             reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    FLOAT           reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    STR             reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    LEN             reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    NULL            reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)
    L_BRACKET       reduce using rule 56 (assignment_operator -> XOR_ASSIGN .)


state 77

    (41) statement -> task_call SEMICOLON .

    OR              reduce using rule 41 (statement -> task_call SEMICOLON .)
    COLON           reduce using rule 41 (statement -> task_call SEMICOLON .)
    ID              reduce using rule 41 (statement -> task_call SEMICOLON .)
    $end            reduce using rule 41 (statement -> task_call SEMICOLON .)
    R_BRACE         reduce using rule 41 (statement -> task_call SEMICOLON .)
    L_BRACE         reduce using rule 41 (statement -> task_call SEMICOLON .)
    LOOP            reduce using rule 41 (statement -> task_call SEMICOLON .)
    RETURN          reduce using rule 41 (statement -> task_call SEMICOLON .)
    IMPORT          reduce using rule 41 (statement -> task_call SEMICOLON .)
    CONTINUE        reduce using rule 41 (statement -> task_call SEMICOLON .)
    BREAK           reduce using rule 41 (statement -> task_call SEMICOLON .)
    L_PAREN         reduce using rule 41 (statement -> task_call SEMICOLON .)
    ADD             reduce using rule 41 (statement -> task_call SEMICOLON .)
    SUB             reduce using rule 41 (statement -> task_call SEMICOLON .)
    NOT             reduce using rule 41 (statement -> task_call SEMICOLON .)
    INT             reduce using rule 41 (statement -> task_call SEMICOLON .)
    FLOAT           reduce using rule 41 (statement -> task_call SEMICOLON .)
    STR             reduce using rule 41 (statement -> task_call SEMICOLON .)
    LEN             reduce using rule 41 (statement -> task_call SEMICOLON .)
    NULL            reduce using rule 41 (statement -> task_call SEMICOLON .)
    L_BRACKET       reduce using rule 41 (statement -> task_call SEMICOLON .)


state 78

    (106) relational_operator -> NE_OP .

    L_PAREN         reduce using rule 106 (relational_operator -> NE_OP .)
    ADD             reduce using rule 106 (relational_operator -> NE_OP .)
    SUB             reduce using rule 106 (relational_operator -> NE_OP .)
    NOT             reduce using rule 106 (relational_operator -> NE_OP .)
    ID              reduce using rule 106 (relational_operator -> NE_OP .)
    INT             reduce using rule 106 (relational_operator -> NE_OP .)
    FLOAT           reduce using rule 106 (relational_operator -> NE_OP .)
    STR             reduce using rule 106 (relational_operator -> NE_OP .)
    LEN             reduce using rule 106 (relational_operator -> NE_OP .)
    NULL            reduce using rule 106 (relational_operator -> NE_OP .)
    L_BRACKET       reduce using rule 106 (relational_operator -> NE_OP .)


state 79

    (91) binary_operator -> MUL .

    L_PAREN         reduce using rule 91 (binary_operator -> MUL .)
    ADD             reduce using rule 91 (binary_operator -> MUL .)
    SUB             reduce using rule 91 (binary_operator -> MUL .)
    NOT             reduce using rule 91 (binary_operator -> MUL .)
    ID              reduce using rule 91 (binary_operator -> MUL .)
    INT             reduce using rule 91 (binary_operator -> MUL .)
    FLOAT           reduce using rule 91 (binary_operator -> MUL .)
    STR             reduce using rule 91 (binary_operator -> MUL .)
    LEN             reduce using rule 91 (binary_operator -> MUL .)
    NULL            reduce using rule 91 (binary_operator -> MUL .)
    L_BRACKET       reduce using rule 91 (binary_operator -> MUL .)


state 80

    (31) operator -> binary_operator .

    L_PAREN         reduce using rule 31 (operator -> binary_operator .)
    ADD             reduce using rule 31 (operator -> binary_operator .)
    SUB             reduce using rule 31 (operator -> binary_operator .)
    NOT             reduce using rule 31 (operator -> binary_operator .)
    ID              reduce using rule 31 (operator -> binary_operator .)
    INT             reduce using rule 31 (operator -> binary_operator .)
    FLOAT           reduce using rule 31 (operator -> binary_operator .)
    STR             reduce using rule 31 (operator -> binary_operator .)
    LEN             reduce using rule 31 (operator -> binary_operator .)
    NULL            reduce using rule 31 (operator -> binary_operator .)
    L_BRACKET       reduce using rule 31 (operator -> binary_operator .)


state 81

    (92) binary_operator -> DIV .

    L_PAREN         reduce using rule 92 (binary_operator -> DIV .)
    ADD             reduce using rule 92 (binary_operator -> DIV .)
    SUB             reduce using rule 92 (binary_operator -> DIV .)
    NOT             reduce using rule 92 (binary_operator -> DIV .)
    ID              reduce using rule 92 (binary_operator -> DIV .)
    INT             reduce using rule 92 (binary_operator -> DIV .)
    FLOAT           reduce using rule 92 (binary_operator -> DIV .)
    STR             reduce using rule 92 (binary_operator -> DIV .)
    LEN             reduce using rule 92 (binary_operator -> DIV .)
    NULL            reduce using rule 92 (binary_operator -> DIV .)
    L_BRACKET       reduce using rule 92 (binary_operator -> DIV .)


state 82

    (107) relational_operator -> MAJOR .

    L_PAREN         reduce using rule 107 (relational_operator -> MAJOR .)
    ADD             reduce using rule 107 (relational_operator -> MAJOR .)
    SUB             reduce using rule 107 (relational_operator -> MAJOR .)
    NOT             reduce using rule 107 (relational_operator -> MAJOR .)
    ID              reduce using rule 107 (relational_operator -> MAJOR .)
    INT             reduce using rule 107 (relational_operator -> MAJOR .)
    FLOAT           reduce using rule 107 (relational_operator -> MAJOR .)
    STR             reduce using rule 107 (relational_operator -> MAJOR .)
    LEN             reduce using rule 107 (relational_operator -> MAJOR .)
    NULL            reduce using rule 107 (relational_operator -> MAJOR .)
    L_BRACKET       reduce using rule 107 (relational_operator -> MAJOR .)


state 83

    (104) relational_operator -> GE_OP .

    L_PAREN         reduce using rule 104 (relational_operator -> GE_OP .)
    ADD             reduce using rule 104 (relational_operator -> GE_OP .)
    SUB             reduce using rule 104 (relational_operator -> GE_OP .)
    NOT             reduce using rule 104 (relational_operator -> GE_OP .)
    ID              reduce using rule 104 (relational_operator -> GE_OP .)
    INT             reduce using rule 104 (relational_operator -> GE_OP .)
    FLOAT           reduce using rule 104 (relational_operator -> GE_OP .)
    STR             reduce using rule 104 (relational_operator -> GE_OP .)
    LEN             reduce using rule 104 (relational_operator -> GE_OP .)
    NULL            reduce using rule 104 (relational_operator -> GE_OP .)
    L_BRACKET       reduce using rule 104 (relational_operator -> GE_OP .)


state 84

    (100) relational_operator -> NOT_OP .

    L_PAREN         reduce using rule 100 (relational_operator -> NOT_OP .)
    ADD             reduce using rule 100 (relational_operator -> NOT_OP .)
    SUB             reduce using rule 100 (relational_operator -> NOT_OP .)
    NOT             reduce using rule 100 (relational_operator -> NOT_OP .)
    ID              reduce using rule 100 (relational_operator -> NOT_OP .)
    INT             reduce using rule 100 (relational_operator -> NOT_OP .)
    FLOAT           reduce using rule 100 (relational_operator -> NOT_OP .)
    STR             reduce using rule 100 (relational_operator -> NOT_OP .)
    LEN             reduce using rule 100 (relational_operator -> NOT_OP .)
    NULL            reduce using rule 100 (relational_operator -> NOT_OP .)
    L_BRACKET       reduce using rule 100 (relational_operator -> NOT_OP .)


state 85

    (102) relational_operator -> OR_OP .

    L_PAREN         reduce using rule 102 (relational_operator -> OR_OP .)
    ADD             reduce using rule 102 (relational_operator -> OR_OP .)
    SUB             reduce using rule 102 (relational_operator -> OR_OP .)
    NOT             reduce using rule 102 (relational_operator -> OR_OP .)
    ID              reduce using rule 102 (relational_operator -> OR_OP .)
    INT             reduce using rule 102 (relational_operator -> OR_OP .)
    FLOAT           reduce using rule 102 (relational_operator -> OR_OP .)
    STR             reduce using rule 102 (relational_operator -> OR_OP .)
    LEN             reduce using rule 102 (relational_operator -> OR_OP .)
    NULL            reduce using rule 102 (relational_operator -> OR_OP .)
    L_BRACKET       reduce using rule 102 (relational_operator -> OR_OP .)


state 86

    (97) binary_operator -> MOD .

    L_PAREN         reduce using rule 97 (binary_operator -> MOD .)
    ADD             reduce using rule 97 (binary_operator -> MOD .)
    SUB             reduce using rule 97 (binary_operator -> MOD .)
    NOT             reduce using rule 97 (binary_operator -> MOD .)
    ID              reduce using rule 97 (binary_operator -> MOD .)
    INT             reduce using rule 97 (binary_operator -> MOD .)
    FLOAT           reduce using rule 97 (binary_operator -> MOD .)
    STR             reduce using rule 97 (binary_operator -> MOD .)
    LEN             reduce using rule 97 (binary_operator -> MOD .)
    NULL            reduce using rule 97 (binary_operator -> MOD .)
    L_BRACKET       reduce using rule 97 (binary_operator -> MOD .)


state 87

    (24) binary_expression -> binary_expression operator . binary_expression
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 49
    unary_operator                 shift and go to state 11
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 134

state 88

    (108) relational_operator -> MINOR .

    L_PAREN         reduce using rule 108 (relational_operator -> MINOR .)
    ADD             reduce using rule 108 (relational_operator -> MINOR .)
    SUB             reduce using rule 108 (relational_operator -> MINOR .)
    NOT             reduce using rule 108 (relational_operator -> MINOR .)
    ID              reduce using rule 108 (relational_operator -> MINOR .)
    INT             reduce using rule 108 (relational_operator -> MINOR .)
    FLOAT           reduce using rule 108 (relational_operator -> MINOR .)
    STR             reduce using rule 108 (relational_operator -> MINOR .)
    LEN             reduce using rule 108 (relational_operator -> MINOR .)
    NULL            reduce using rule 108 (relational_operator -> MINOR .)
    L_BRACKET       reduce using rule 108 (relational_operator -> MINOR .)


state 89

    (98) binary_operator -> RIGHT_OP .

    L_PAREN         reduce using rule 98 (binary_operator -> RIGHT_OP .)
    ADD             reduce using rule 98 (binary_operator -> RIGHT_OP .)
    SUB             reduce using rule 98 (binary_operator -> RIGHT_OP .)
    NOT             reduce using rule 98 (binary_operator -> RIGHT_OP .)
    ID              reduce using rule 98 (binary_operator -> RIGHT_OP .)
    INT             reduce using rule 98 (binary_operator -> RIGHT_OP .)
    FLOAT           reduce using rule 98 (binary_operator -> RIGHT_OP .)
    STR             reduce using rule 98 (binary_operator -> RIGHT_OP .)
    LEN             reduce using rule 98 (binary_operator -> RIGHT_OP .)
    NULL            reduce using rule 98 (binary_operator -> RIGHT_OP .)
    L_BRACKET       reduce using rule 98 (binary_operator -> RIGHT_OP .)


state 90

    (94) binary_operator -> AND .

    L_PAREN         reduce using rule 94 (binary_operator -> AND .)
    ADD             reduce using rule 94 (binary_operator -> AND .)
    SUB             reduce using rule 94 (binary_operator -> AND .)
    NOT             reduce using rule 94 (binary_operator -> AND .)
    ID              reduce using rule 94 (binary_operator -> AND .)
    INT             reduce using rule 94 (binary_operator -> AND .)
    FLOAT           reduce using rule 94 (binary_operator -> AND .)
    STR             reduce using rule 94 (binary_operator -> AND .)
    LEN             reduce using rule 94 (binary_operator -> AND .)
    NULL            reduce using rule 94 (binary_operator -> AND .)
    L_BRACKET       reduce using rule 94 (binary_operator -> AND .)


state 91

    (96) binary_operator -> XOR .

    L_PAREN         reduce using rule 96 (binary_operator -> XOR .)
    ADD             reduce using rule 96 (binary_operator -> XOR .)
    SUB             reduce using rule 96 (binary_operator -> XOR .)
    NOT             reduce using rule 96 (binary_operator -> XOR .)
    ID              reduce using rule 96 (binary_operator -> XOR .)
    INT             reduce using rule 96 (binary_operator -> XOR .)
    FLOAT           reduce using rule 96 (binary_operator -> XOR .)
    STR             reduce using rule 96 (binary_operator -> XOR .)
    LEN             reduce using rule 96 (binary_operator -> XOR .)
    NULL            reduce using rule 96 (binary_operator -> XOR .)
    L_BRACKET       reduce using rule 96 (binary_operator -> XOR .)


state 92

    (101) relational_operator -> AND_OP .

    L_PAREN         reduce using rule 101 (relational_operator -> AND_OP .)
    ADD             reduce using rule 101 (relational_operator -> AND_OP .)
    SUB             reduce using rule 101 (relational_operator -> AND_OP .)
    NOT             reduce using rule 101 (relational_operator -> AND_OP .)
    ID              reduce using rule 101 (relational_operator -> AND_OP .)
    INT             reduce using rule 101 (relational_operator -> AND_OP .)
    FLOAT           reduce using rule 101 (relational_operator -> AND_OP .)
    STR             reduce using rule 101 (relational_operator -> AND_OP .)
    LEN             reduce using rule 101 (relational_operator -> AND_OP .)
    NULL            reduce using rule 101 (relational_operator -> AND_OP .)
    L_BRACKET       reduce using rule 101 (relational_operator -> AND_OP .)


state 93

    (32) operator -> relational_operator .

    L_PAREN         reduce using rule 32 (operator -> relational_operator .)
    ADD             reduce using rule 32 (operator -> relational_operator .)
    SUB             reduce using rule 32 (operator -> relational_operator .)
    NOT             reduce using rule 32 (operator -> relational_operator .)
    ID              reduce using rule 32 (operator -> relational_operator .)
    INT             reduce using rule 32 (operator -> relational_operator .)
    FLOAT           reduce using rule 32 (operator -> relational_operator .)
    STR             reduce using rule 32 (operator -> relational_operator .)
    LEN             reduce using rule 32 (operator -> relational_operator .)
    NULL            reduce using rule 32 (operator -> relational_operator .)
    L_BRACKET       reduce using rule 32 (operator -> relational_operator .)


state 94

    (99) binary_operator -> LEFT_OP .

    L_PAREN         reduce using rule 99 (binary_operator -> LEFT_OP .)
    ADD             reduce using rule 99 (binary_operator -> LEFT_OP .)
    SUB             reduce using rule 99 (binary_operator -> LEFT_OP .)
    NOT             reduce using rule 99 (binary_operator -> LEFT_OP .)
    ID              reduce using rule 99 (binary_operator -> LEFT_OP .)
    INT             reduce using rule 99 (binary_operator -> LEFT_OP .)
    FLOAT           reduce using rule 99 (binary_operator -> LEFT_OP .)
    STR             reduce using rule 99 (binary_operator -> LEFT_OP .)
    LEN             reduce using rule 99 (binary_operator -> LEFT_OP .)
    NULL            reduce using rule 99 (binary_operator -> LEFT_OP .)
    L_BRACKET       reduce using rule 99 (binary_operator -> LEFT_OP .)


state 95

    (90) binary_operator -> SUB .

    L_PAREN         reduce using rule 90 (binary_operator -> SUB .)
    ADD             reduce using rule 90 (binary_operator -> SUB .)
    SUB             reduce using rule 90 (binary_operator -> SUB .)
    NOT             reduce using rule 90 (binary_operator -> SUB .)
    ID              reduce using rule 90 (binary_operator -> SUB .)
    INT             reduce using rule 90 (binary_operator -> SUB .)
    FLOAT           reduce using rule 90 (binary_operator -> SUB .)
    STR             reduce using rule 90 (binary_operator -> SUB .)
    LEN             reduce using rule 90 (binary_operator -> SUB .)
    NULL            reduce using rule 90 (binary_operator -> SUB .)
    L_BRACKET       reduce using rule 90 (binary_operator -> SUB .)


state 96

    (103) relational_operator -> LE_OP .

    L_PAREN         reduce using rule 103 (relational_operator -> LE_OP .)
    ADD             reduce using rule 103 (relational_operator -> LE_OP .)
    SUB             reduce using rule 103 (relational_operator -> LE_OP .)
    NOT             reduce using rule 103 (relational_operator -> LE_OP .)
    ID              reduce using rule 103 (relational_operator -> LE_OP .)
    INT             reduce using rule 103 (relational_operator -> LE_OP .)
    FLOAT           reduce using rule 103 (relational_operator -> LE_OP .)
    STR             reduce using rule 103 (relational_operator -> LE_OP .)
    LEN             reduce using rule 103 (relational_operator -> LE_OP .)
    NULL            reduce using rule 103 (relational_operator -> LE_OP .)
    L_BRACKET       reduce using rule 103 (relational_operator -> LE_OP .)


state 97

    (95) binary_operator -> OR .

    L_PAREN         reduce using rule 95 (binary_operator -> OR .)
    ADD             reduce using rule 95 (binary_operator -> OR .)
    SUB             reduce using rule 95 (binary_operator -> OR .)
    NOT             reduce using rule 95 (binary_operator -> OR .)
    ID              reduce using rule 95 (binary_operator -> OR .)
    INT             reduce using rule 95 (binary_operator -> OR .)
    FLOAT           reduce using rule 95 (binary_operator -> OR .)
    STR             reduce using rule 95 (binary_operator -> OR .)
    LEN             reduce using rule 95 (binary_operator -> OR .)
    NULL            reduce using rule 95 (binary_operator -> OR .)
    L_BRACKET       reduce using rule 95 (binary_operator -> OR .)


state 98

    (105) relational_operator -> EQ_OP .

    L_PAREN         reduce using rule 105 (relational_operator -> EQ_OP .)
    ADD             reduce using rule 105 (relational_operator -> EQ_OP .)
    SUB             reduce using rule 105 (relational_operator -> EQ_OP .)
    NOT             reduce using rule 105 (relational_operator -> EQ_OP .)
    ID              reduce using rule 105 (relational_operator -> EQ_OP .)
    INT             reduce using rule 105 (relational_operator -> EQ_OP .)
    FLOAT           reduce using rule 105 (relational_operator -> EQ_OP .)
    STR             reduce using rule 105 (relational_operator -> EQ_OP .)
    LEN             reduce using rule 105 (relational_operator -> EQ_OP .)
    NULL            reduce using rule 105 (relational_operator -> EQ_OP .)
    L_BRACKET       reduce using rule 105 (relational_operator -> EQ_OP .)


state 99

    (89) binary_operator -> ADD .

    L_PAREN         reduce using rule 89 (binary_operator -> ADD .)
    ADD             reduce using rule 89 (binary_operator -> ADD .)
    SUB             reduce using rule 89 (binary_operator -> ADD .)
    NOT             reduce using rule 89 (binary_operator -> ADD .)
    ID              reduce using rule 89 (binary_operator -> ADD .)
    INT             reduce using rule 89 (binary_operator -> ADD .)
    FLOAT           reduce using rule 89 (binary_operator -> ADD .)
    STR             reduce using rule 89 (binary_operator -> ADD .)
    LEN             reduce using rule 89 (binary_operator -> ADD .)
    NULL            reduce using rule 89 (binary_operator -> ADD .)
    L_BRACKET       reduce using rule 89 (binary_operator -> ADD .)


state 100

    (93) binary_operator -> EXP .

    L_PAREN         reduce using rule 93 (binary_operator -> EXP .)
    ADD             reduce using rule 93 (binary_operator -> EXP .)
    SUB             reduce using rule 93 (binary_operator -> EXP .)
    NOT             reduce using rule 93 (binary_operator -> EXP .)
    ID              reduce using rule 93 (binary_operator -> EXP .)
    INT             reduce using rule 93 (binary_operator -> EXP .)
    FLOAT           reduce using rule 93 (binary_operator -> EXP .)
    STR             reduce using rule 93 (binary_operator -> EXP .)
    LEN             reduce using rule 93 (binary_operator -> EXP .)
    NULL            reduce using rule 93 (binary_operator -> EXP .)
    L_BRACKET       reduce using rule 93 (binary_operator -> EXP .)


state 101

    (75) task_call -> ID L_PAREN . value_list R_PAREN
    (14) value_list -> . value_list COMMA expression
    (15) value_list -> . expression
    (16) value_list -> . empty
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (109) empty -> .
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    R_PAREN         reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    task_call                      shift and go to state 51
    unary_operator                 shift and go to state 11
    empty                          shift and go to state 59
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    expression                     shift and go to state 56
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    value_list                     shift and go to state 135
    external_call                  shift and go to state 54

state 102

    (28) list_req -> ID list_req_access .

    REM             reduce using rule 28 (list_req -> ID list_req_access .)
    ADD             reduce using rule 28 (list_req -> ID list_req_access .)
    SUB             reduce using rule 28 (list_req -> ID list_req_access .)
    MUL             reduce using rule 28 (list_req -> ID list_req_access .)
    DIV             reduce using rule 28 (list_req -> ID list_req_access .)
    EXP             reduce using rule 28 (list_req -> ID list_req_access .)
    AND             reduce using rule 28 (list_req -> ID list_req_access .)
    OR              reduce using rule 28 (list_req -> ID list_req_access .)
    XOR             reduce using rule 28 (list_req -> ID list_req_access .)
    MOD             reduce using rule 28 (list_req -> ID list_req_access .)
    RIGHT_OP        reduce using rule 28 (list_req -> ID list_req_access .)
    LEFT_OP         reduce using rule 28 (list_req -> ID list_req_access .)
    NOT_OP          reduce using rule 28 (list_req -> ID list_req_access .)
    AND_OP          reduce using rule 28 (list_req -> ID list_req_access .)
    OR_OP           reduce using rule 28 (list_req -> ID list_req_access .)
    LE_OP           reduce using rule 28 (list_req -> ID list_req_access .)
    GE_OP           reduce using rule 28 (list_req -> ID list_req_access .)
    EQ_OP           reduce using rule 28 (list_req -> ID list_req_access .)
    NE_OP           reduce using rule 28 (list_req -> ID list_req_access .)
    MAJOR           reduce using rule 28 (list_req -> ID list_req_access .)
    MINOR           reduce using rule 28 (list_req -> ID list_req_access .)
    ID              reduce using rule 28 (list_req -> ID list_req_access .)
    L_BRACE         reduce using rule 28 (list_req -> ID list_req_access .)
    LOOP            reduce using rule 28 (list_req -> ID list_req_access .)
    RETURN          reduce using rule 28 (list_req -> ID list_req_access .)
    IMPORT          reduce using rule 28 (list_req -> ID list_req_access .)
    CONTINUE        reduce using rule 28 (list_req -> ID list_req_access .)
    BREAK           reduce using rule 28 (list_req -> ID list_req_access .)
    L_PAREN         reduce using rule 28 (list_req -> ID list_req_access .)
    NOT             reduce using rule 28 (list_req -> ID list_req_access .)
    INT             reduce using rule 28 (list_req -> ID list_req_access .)
    FLOAT           reduce using rule 28 (list_req -> ID list_req_access .)
    STR             reduce using rule 28 (list_req -> ID list_req_access .)
    LEN             reduce using rule 28 (list_req -> ID list_req_access .)
    NULL            reduce using rule 28 (list_req -> ID list_req_access .)
    L_BRACKET       reduce using rule 28 (list_req -> ID list_req_access .)
    R_BRACKET       reduce using rule 28 (list_req -> ID list_req_access .)
    ASSIGN          reduce using rule 28 (list_req -> ID list_req_access .)
    MUL_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    DIV_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    ADD_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    SUB_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    EXP_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    LEFT_ASSIGN     reduce using rule 28 (list_req -> ID list_req_access .)
    RIGHT_ASSIGN    reduce using rule 28 (list_req -> ID list_req_access .)
    AND_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    OR_ASSIGN       reduce using rule 28 (list_req -> ID list_req_access .)
    XOR_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    MOD_ASSIGN      reduce using rule 28 (list_req -> ID list_req_access .)
    QUESTION        reduce using rule 28 (list_req -> ID list_req_access .)
    R_PAREN         reduce using rule 28 (list_req -> ID list_req_access .)
    COLON           reduce using rule 28 (list_req -> ID list_req_access .)
    COMMA           reduce using rule 28 (list_req -> ID list_req_access .)
    SEMICOLON       reduce using rule 28 (list_req -> ID list_req_access .)
    R_BRACE         reduce using rule 28 (list_req -> ID list_req_access .)


state 103

    (66) free_function -> ID ASSIGN . FREE L_PAREN ID R_PAREN
    (64) import_function -> ID ASSIGN . IMPORT L_PAREN STR R_PAREN
    (46) assignment_operator -> ASSIGN .

    FREE            shift and go to state 137
    IMPORT          shift and go to state 136
    L_PAREN         reduce using rule 46 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 46 (assignment_operator -> ASSIGN .)
    L_BRACE         reduce using rule 46 (assignment_operator -> ASSIGN .)
    ADD             reduce using rule 46 (assignment_operator -> ASSIGN .)
    SUB             reduce using rule 46 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 46 (assignment_operator -> ASSIGN .)
    INT             reduce using rule 46 (assignment_operator -> ASSIGN .)
    FLOAT           reduce using rule 46 (assignment_operator -> ASSIGN .)
    STR             reduce using rule 46 (assignment_operator -> ASSIGN .)
    LEN             reduce using rule 46 (assignment_operator -> ASSIGN .)
    NULL            reduce using rule 46 (assignment_operator -> ASSIGN .)
    L_BRACKET       reduce using rule 46 (assignment_operator -> ASSIGN .)


state 104

    (21) list_rem -> ID L_BRACKET . OR value R_BRACKET
    (22) list_rem -> ID L_BRACKET . value OR R_BRACKET
    (23) list_rem -> ID L_BRACKET . value OR value R_BRACKET
    (29) list_req_access -> L_BRACKET . binary_expression R_BRACKET list_req_access
    (30) list_req_access -> L_BRACKET . binary_expression R_BRACKET
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT

    OR              shift and go to state 140
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_PAREN         shift and go to state 34
    L_BRACKET       shift and go to state 13
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44

    value                          shift and go to state 138
    unary_operator                 shift and go to state 11
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 139

state 105

    (43) external_call -> ID DOT . task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN

    ID              shift and go to state 141

    task_call                      shift and go to state 142

state 106

    (44) expression_statement -> ID assignment_operator . expression
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    expression                     shift and go to state 143
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    task_call                      shift and go to state 51
    external_call                  shift and go to state 54

state 107

    (33) statement -> expression_statement SEMICOLON .

    OR              reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    COLON           reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    ID              reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    $end            reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    R_BRACE         reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    L_BRACE         reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    LOOP            reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    RETURN          reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    IMPORT          reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    CONTINUE        reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    BREAK           reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    L_PAREN         reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    ADD             reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    SUB             reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    NOT             reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    INT             reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    FLOAT           reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    STR             reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    LEN             reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    NULL            reduce using rule 33 (statement -> expression_statement SEMICOLON .)
    L_BRACKET       reduce using rule 33 (statement -> expression_statement SEMICOLON .)


state 108

    (25) binary_expression -> L_PAREN binary_expression . R_PAREN
    (24) binary_expression -> binary_expression . operator binary_expression
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

    R_PAREN         shift and go to state 144
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 109

    (65) import_function -> IMPORT L_PAREN . ID R_PAREN

    ID              shift and go to state 145


state 110

    (73) key_value_list -> value . COLON expression
    (27) binary_expression -> value .
    (71) hash_rem -> value . REM list_def

    COLON           shift and go to state 146
    ADD             reduce using rule 27 (binary_expression -> value .)
    SUB             reduce using rule 27 (binary_expression -> value .)
    MUL             reduce using rule 27 (binary_expression -> value .)
    DIV             reduce using rule 27 (binary_expression -> value .)
    EXP             reduce using rule 27 (binary_expression -> value .)
    AND             reduce using rule 27 (binary_expression -> value .)
    OR              reduce using rule 27 (binary_expression -> value .)
    XOR             reduce using rule 27 (binary_expression -> value .)
    MOD             reduce using rule 27 (binary_expression -> value .)
    RIGHT_OP        reduce using rule 27 (binary_expression -> value .)
    LEFT_OP         reduce using rule 27 (binary_expression -> value .)
    NOT_OP          reduce using rule 27 (binary_expression -> value .)
    AND_OP          reduce using rule 27 (binary_expression -> value .)
    OR_OP           reduce using rule 27 (binary_expression -> value .)
    LE_OP           reduce using rule 27 (binary_expression -> value .)
    GE_OP           reduce using rule 27 (binary_expression -> value .)
    EQ_OP           reduce using rule 27 (binary_expression -> value .)
    NE_OP           reduce using rule 27 (binary_expression -> value .)
    MAJOR           reduce using rule 27 (binary_expression -> value .)
    MINOR           reduce using rule 27 (binary_expression -> value .)
    QUESTION        reduce using rule 27 (binary_expression -> value .)
    REM             shift and go to state 63


state 111

    (74) key_value_list -> empty .

    R_BRACE         reduce using rule 74 (key_value_list -> empty .)
    COMMA           reduce using rule 74 (key_value_list -> empty .)


state 112

    (61) statement_list -> statement .

    R_BRACE         reduce using rule 61 (statement_list -> statement .)
    ID              reduce using rule 61 (statement_list -> statement .)
    L_BRACE         reduce using rule 61 (statement_list -> statement .)
    LOOP            reduce using rule 61 (statement_list -> statement .)
    RETURN          reduce using rule 61 (statement_list -> statement .)
    IMPORT          reduce using rule 61 (statement_list -> statement .)
    CONTINUE        reduce using rule 61 (statement_list -> statement .)
    BREAK           reduce using rule 61 (statement_list -> statement .)
    L_PAREN         reduce using rule 61 (statement_list -> statement .)
    ADD             reduce using rule 61 (statement_list -> statement .)
    SUB             reduce using rule 61 (statement_list -> statement .)
    NOT             reduce using rule 61 (statement_list -> statement .)
    INT             reduce using rule 61 (statement_list -> statement .)
    FLOAT           reduce using rule 61 (statement_list -> statement .)
    STR             reduce using rule 61 (statement_list -> statement .)
    LEN             reduce using rule 61 (statement_list -> statement .)
    NULL            reduce using rule 61 (statement_list -> statement .)
    L_BRACKET       reduce using rule 61 (statement_list -> statement .)


state 113

    (81) value -> list_req .
    (45) expression_statement -> list_req . assignment_operator expression
    (46) assignment_operator -> . ASSIGN
    (47) assignment_operator -> . MUL_ASSIGN
    (48) assignment_operator -> . DIV_ASSIGN
    (49) assignment_operator -> . ADD_ASSIGN
    (50) assignment_operator -> . SUB_ASSIGN
    (51) assignment_operator -> . EXP_ASSIGN
    (52) assignment_operator -> . LEFT_ASSIGN
    (53) assignment_operator -> . RIGHT_ASSIGN
    (54) assignment_operator -> . AND_ASSIGN
    (55) assignment_operator -> . OR_ASSIGN
    (56) assignment_operator -> . XOR_ASSIGN
    (57) assignment_operator -> . MOD_ASSIGN

    COLON           reduce using rule 81 (value -> list_req .)
    REM             reduce using rule 81 (value -> list_req .)
    ADD             reduce using rule 81 (value -> list_req .)
    SUB             reduce using rule 81 (value -> list_req .)
    MUL             reduce using rule 81 (value -> list_req .)
    DIV             reduce using rule 81 (value -> list_req .)
    EXP             reduce using rule 81 (value -> list_req .)
    AND             reduce using rule 81 (value -> list_req .)
    OR              reduce using rule 81 (value -> list_req .)
    XOR             reduce using rule 81 (value -> list_req .)
    MOD             reduce using rule 81 (value -> list_req .)
    RIGHT_OP        reduce using rule 81 (value -> list_req .)
    LEFT_OP         reduce using rule 81 (value -> list_req .)
    NOT_OP          reduce using rule 81 (value -> list_req .)
    AND_OP          reduce using rule 81 (value -> list_req .)
    OR_OP           reduce using rule 81 (value -> list_req .)
    LE_OP           reduce using rule 81 (value -> list_req .)
    GE_OP           reduce using rule 81 (value -> list_req .)
    EQ_OP           reduce using rule 81 (value -> list_req .)
    NE_OP           reduce using rule 81 (value -> list_req .)
    MAJOR           reduce using rule 81 (value -> list_req .)
    MINOR           reduce using rule 81 (value -> list_req .)
    QUESTION        reduce using rule 81 (value -> list_req .)
    ASSIGN          shift and go to state 73
    MUL_ASSIGN      shift and go to state 75
    DIV_ASSIGN      shift and go to state 66
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 70
    EXP_ASSIGN      shift and go to state 71
    LEFT_ASSIGN     shift and go to state 72
    RIGHT_ASSIGN    shift and go to state 68
    AND_ASSIGN      shift and go to state 69
    OR_ASSIGN       shift and go to state 65
    XOR_ASSIGN      shift and go to state 76
    MOD_ASSIGN      shift and go to state 64

    assignment_operator            shift and go to state 74

state 114

    (59) compound_statement -> L_BRACE statement_list . R_BRACE
    (60) statement_list -> statement_list . statement
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    R_BRACE         shift and go to state 148
    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    compound_statement             shift and go to state 12
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    list_rem                       shift and go to state 18
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 147
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    free_function                  shift and go to state 43
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 115

    (76) value -> ID .
    (44) expression_statement -> ID . assignment_operator expression
    (66) free_function -> ID . ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> ID . ASSIGN IMPORT L_PAREN STR R_PAREN
    (43) external_call -> ID . DOT task_call
    (75) task_call -> ID . L_PAREN value_list R_PAREN
    (28) list_req -> ID . list_req_access
    (21) list_rem -> ID . L_BRACKET OR value R_BRACKET
    (22) list_rem -> ID . L_BRACKET value OR R_BRACKET
    (23) list_rem -> ID . L_BRACKET value OR value R_BRACKET
    (46) assignment_operator -> . ASSIGN
    (47) assignment_operator -> . MUL_ASSIGN
    (48) assignment_operator -> . DIV_ASSIGN
    (49) assignment_operator -> . ADD_ASSIGN
    (50) assignment_operator -> . SUB_ASSIGN
    (51) assignment_operator -> . EXP_ASSIGN
    (52) assignment_operator -> . LEFT_ASSIGN
    (53) assignment_operator -> . RIGHT_ASSIGN
    (54) assignment_operator -> . AND_ASSIGN
    (55) assignment_operator -> . OR_ASSIGN
    (56) assignment_operator -> . XOR_ASSIGN
    (57) assignment_operator -> . MOD_ASSIGN
    (29) list_req_access -> . L_BRACKET binary_expression R_BRACKET list_req_access
    (30) list_req_access -> . L_BRACKET binary_expression R_BRACKET

    COLON           reduce using rule 76 (value -> ID .)
    REM             reduce using rule 76 (value -> ID .)
    ADD             reduce using rule 76 (value -> ID .)
    SUB             reduce using rule 76 (value -> ID .)
    MUL             reduce using rule 76 (value -> ID .)
    DIV             reduce using rule 76 (value -> ID .)
    EXP             reduce using rule 76 (value -> ID .)
    AND             reduce using rule 76 (value -> ID .)
    OR              reduce using rule 76 (value -> ID .)
    XOR             reduce using rule 76 (value -> ID .)
    MOD             reduce using rule 76 (value -> ID .)
    RIGHT_OP        reduce using rule 76 (value -> ID .)
    LEFT_OP         reduce using rule 76 (value -> ID .)
    NOT_OP          reduce using rule 76 (value -> ID .)
    AND_OP          reduce using rule 76 (value -> ID .)
    OR_OP           reduce using rule 76 (value -> ID .)
    LE_OP           reduce using rule 76 (value -> ID .)
    GE_OP           reduce using rule 76 (value -> ID .)
    EQ_OP           reduce using rule 76 (value -> ID .)
    NE_OP           reduce using rule 76 (value -> ID .)
    MAJOR           reduce using rule 76 (value -> ID .)
    MINOR           reduce using rule 76 (value -> ID .)
    QUESTION        reduce using rule 76 (value -> ID .)
    ASSIGN          shift and go to state 103
    DOT             shift and go to state 105
    L_PAREN         shift and go to state 101
    L_BRACKET       shift and go to state 104
    MUL_ASSIGN      shift and go to state 75
    DIV_ASSIGN      shift and go to state 66
    ADD_ASSIGN      shift and go to state 67
    SUB_ASSIGN      shift and go to state 70
    EXP_ASSIGN      shift and go to state 71
    LEFT_ASSIGN     shift and go to state 72
    RIGHT_ASSIGN    shift and go to state 68
    AND_ASSIGN      shift and go to state 69
    OR_ASSIGN       shift and go to state 65
    XOR_ASSIGN      shift and go to state 76
    MOD_ASSIGN      shift and go to state 64

    assignment_operator            shift and go to state 106
    list_req_access                shift and go to state 102

state 116

    (58) compound_statement -> L_BRACE R_BRACE .

    OR              reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    COLON           reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    ID              reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    $end            reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    R_BRACE         reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    L_BRACE         reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    LOOP            reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    RETURN          reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    IMPORT          reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    CONTINUE        reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    BREAK           reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    L_PAREN         reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    ADD             reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    SUB             reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    NOT             reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    INT             reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    FLOAT           reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    STR             reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    LEN             reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    NULL            reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)
    L_BRACKET       reduce using rule 58 (compound_statement -> L_BRACE R_BRACE .)


state 117

    (70) hash_def -> L_BRACE key_value_list . R_BRACE
    (72) key_value_list -> key_value_list . COMMA value COLON expression

    R_BRACE         shift and go to state 150
    COMMA           shift and go to state 149


state 118

    (39) statement -> import_function SEMICOLON .

    OR              reduce using rule 39 (statement -> import_function SEMICOLON .)
    COLON           reduce using rule 39 (statement -> import_function SEMICOLON .)
    ID              reduce using rule 39 (statement -> import_function SEMICOLON .)
    $end            reduce using rule 39 (statement -> import_function SEMICOLON .)
    R_BRACE         reduce using rule 39 (statement -> import_function SEMICOLON .)
    L_BRACE         reduce using rule 39 (statement -> import_function SEMICOLON .)
    LOOP            reduce using rule 39 (statement -> import_function SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> import_function SEMICOLON .)
    IMPORT          reduce using rule 39 (statement -> import_function SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> import_function SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> import_function SEMICOLON .)
    L_PAREN         reduce using rule 39 (statement -> import_function SEMICOLON .)
    ADD             reduce using rule 39 (statement -> import_function SEMICOLON .)
    SUB             reduce using rule 39 (statement -> import_function SEMICOLON .)
    NOT             reduce using rule 39 (statement -> import_function SEMICOLON .)
    INT             reduce using rule 39 (statement -> import_function SEMICOLON .)
    FLOAT           reduce using rule 39 (statement -> import_function SEMICOLON .)
    STR             reduce using rule 39 (statement -> import_function SEMICOLON .)
    LEN             reduce using rule 39 (statement -> import_function SEMICOLON .)
    NULL            reduce using rule 39 (statement -> import_function SEMICOLON .)
    L_BRACKET       reduce using rule 39 (statement -> import_function SEMICOLON .)


state 119

    (84) value -> LEN value .

    REM             reduce using rule 84 (value -> LEN value .)
    ADD             reduce using rule 84 (value -> LEN value .)
    SUB             reduce using rule 84 (value -> LEN value .)
    MUL             reduce using rule 84 (value -> LEN value .)
    DIV             reduce using rule 84 (value -> LEN value .)
    EXP             reduce using rule 84 (value -> LEN value .)
    AND             reduce using rule 84 (value -> LEN value .)
    OR              reduce using rule 84 (value -> LEN value .)
    XOR             reduce using rule 84 (value -> LEN value .)
    MOD             reduce using rule 84 (value -> LEN value .)
    RIGHT_OP        reduce using rule 84 (value -> LEN value .)
    LEFT_OP         reduce using rule 84 (value -> LEN value .)
    NOT_OP          reduce using rule 84 (value -> LEN value .)
    AND_OP          reduce using rule 84 (value -> LEN value .)
    OR_OP           reduce using rule 84 (value -> LEN value .)
    LE_OP           reduce using rule 84 (value -> LEN value .)
    GE_OP           reduce using rule 84 (value -> LEN value .)
    EQ_OP           reduce using rule 84 (value -> LEN value .)
    NE_OP           reduce using rule 84 (value -> LEN value .)
    MAJOR           reduce using rule 84 (value -> LEN value .)
    MINOR           reduce using rule 84 (value -> LEN value .)
    QUESTION        reduce using rule 84 (value -> LEN value .)
    R_BRACKET       reduce using rule 84 (value -> LEN value .)
    R_PAREN         reduce using rule 84 (value -> LEN value .)
    COMMA           reduce using rule 84 (value -> LEN value .)
    COLON           reduce using rule 84 (value -> LEN value .)
    ID              reduce using rule 84 (value -> LEN value .)
    L_BRACE         reduce using rule 84 (value -> LEN value .)
    LOOP            reduce using rule 84 (value -> LEN value .)
    RETURN          reduce using rule 84 (value -> LEN value .)
    IMPORT          reduce using rule 84 (value -> LEN value .)
    CONTINUE        reduce using rule 84 (value -> LEN value .)
    BREAK           reduce using rule 84 (value -> LEN value .)
    L_PAREN         reduce using rule 84 (value -> LEN value .)
    NOT             reduce using rule 84 (value -> LEN value .)
    INT             reduce using rule 84 (value -> LEN value .)
    FLOAT           reduce using rule 84 (value -> LEN value .)
    STR             reduce using rule 84 (value -> LEN value .)
    LEN             reduce using rule 84 (value -> LEN value .)
    NULL            reduce using rule 84 (value -> LEN value .)
    L_BRACKET       reduce using rule 84 (value -> LEN value .)
    SEMICOLON       reduce using rule 84 (value -> LEN value .)
    R_BRACE         reduce using rule 84 (value -> LEN value .)


state 120

    (40) statement -> external_call SEMICOLON .

    OR              reduce using rule 40 (statement -> external_call SEMICOLON .)
    COLON           reduce using rule 40 (statement -> external_call SEMICOLON .)
    ID              reduce using rule 40 (statement -> external_call SEMICOLON .)
    $end            reduce using rule 40 (statement -> external_call SEMICOLON .)
    R_BRACE         reduce using rule 40 (statement -> external_call SEMICOLON .)
    L_BRACE         reduce using rule 40 (statement -> external_call SEMICOLON .)
    LOOP            reduce using rule 40 (statement -> external_call SEMICOLON .)
    RETURN          reduce using rule 40 (statement -> external_call SEMICOLON .)
    IMPORT          reduce using rule 40 (statement -> external_call SEMICOLON .)
    CONTINUE        reduce using rule 40 (statement -> external_call SEMICOLON .)
    BREAK           reduce using rule 40 (statement -> external_call SEMICOLON .)
    L_PAREN         reduce using rule 40 (statement -> external_call SEMICOLON .)
    ADD             reduce using rule 40 (statement -> external_call SEMICOLON .)
    SUB             reduce using rule 40 (statement -> external_call SEMICOLON .)
    NOT             reduce using rule 40 (statement -> external_call SEMICOLON .)
    INT             reduce using rule 40 (statement -> external_call SEMICOLON .)
    FLOAT           reduce using rule 40 (statement -> external_call SEMICOLON .)
    STR             reduce using rule 40 (statement -> external_call SEMICOLON .)
    LEN             reduce using rule 40 (statement -> external_call SEMICOLON .)
    NULL            reduce using rule 40 (statement -> external_call SEMICOLON .)
    L_BRACKET       reduce using rule 40 (statement -> external_call SEMICOLON .)


state 121

    (38) statement -> free_function SEMICOLON .

    OR              reduce using rule 38 (statement -> free_function SEMICOLON .)
    COLON           reduce using rule 38 (statement -> free_function SEMICOLON .)
    ID              reduce using rule 38 (statement -> free_function SEMICOLON .)
    $end            reduce using rule 38 (statement -> free_function SEMICOLON .)
    R_BRACE         reduce using rule 38 (statement -> free_function SEMICOLON .)
    L_BRACE         reduce using rule 38 (statement -> free_function SEMICOLON .)
    LOOP            reduce using rule 38 (statement -> free_function SEMICOLON .)
    RETURN          reduce using rule 38 (statement -> free_function SEMICOLON .)
    IMPORT          reduce using rule 38 (statement -> free_function SEMICOLON .)
    CONTINUE        reduce using rule 38 (statement -> free_function SEMICOLON .)
    BREAK           reduce using rule 38 (statement -> free_function SEMICOLON .)
    L_PAREN         reduce using rule 38 (statement -> free_function SEMICOLON .)
    ADD             reduce using rule 38 (statement -> free_function SEMICOLON .)
    SUB             reduce using rule 38 (statement -> free_function SEMICOLON .)
    NOT             reduce using rule 38 (statement -> free_function SEMICOLON .)
    INT             reduce using rule 38 (statement -> free_function SEMICOLON .)
    FLOAT           reduce using rule 38 (statement -> free_function SEMICOLON .)
    STR             reduce using rule 38 (statement -> free_function SEMICOLON .)
    LEN             reduce using rule 38 (statement -> free_function SEMICOLON .)
    NULL            reduce using rule 38 (statement -> free_function SEMICOLON .)
    L_BRACKET       reduce using rule 38 (statement -> free_function SEMICOLON .)


state 122

    (7) loop_statement -> LOOP expression . statement
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    compound_statement             shift and go to state 12
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    list_rem                       shift and go to state 18
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 151
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    free_function                  shift and go to state 43
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 123

    (8) loop_statement -> LOOP ID . COMMA expression COMMA value statement
    (9) loop_statement -> LOOP ID . COMMA expression statement
    (21) list_rem -> ID . L_BRACKET OR value R_BRACKET
    (22) list_rem -> ID . L_BRACKET value OR R_BRACKET
    (23) list_rem -> ID . L_BRACKET value OR value R_BRACKET
    (76) value -> ID .
    (75) task_call -> ID . L_PAREN value_list R_PAREN
    (28) list_req -> ID . list_req_access
    (43) external_call -> ID . DOT task_call
    (29) list_req_access -> . L_BRACKET binary_expression R_BRACKET list_req_access
    (30) list_req_access -> . L_BRACKET binary_expression R_BRACKET

  ! shift/reduce conflict for L_BRACKET resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
    COMMA           shift and go to state 152
    L_BRACKET       shift and go to state 104
    REM             reduce using rule 76 (value -> ID .)
    ADD             reduce using rule 76 (value -> ID .)
    SUB             reduce using rule 76 (value -> ID .)
    MUL             reduce using rule 76 (value -> ID .)
    DIV             reduce using rule 76 (value -> ID .)
    EXP             reduce using rule 76 (value -> ID .)
    AND             reduce using rule 76 (value -> ID .)
    OR              reduce using rule 76 (value -> ID .)
    XOR             reduce using rule 76 (value -> ID .)
    MOD             reduce using rule 76 (value -> ID .)
    RIGHT_OP        reduce using rule 76 (value -> ID .)
    LEFT_OP         reduce using rule 76 (value -> ID .)
    NOT_OP          reduce using rule 76 (value -> ID .)
    AND_OP          reduce using rule 76 (value -> ID .)
    OR_OP           reduce using rule 76 (value -> ID .)
    LE_OP           reduce using rule 76 (value -> ID .)
    GE_OP           reduce using rule 76 (value -> ID .)
    EQ_OP           reduce using rule 76 (value -> ID .)
    NE_OP           reduce using rule 76 (value -> ID .)
    MAJOR           reduce using rule 76 (value -> ID .)
    MINOR           reduce using rule 76 (value -> ID .)
    ID              reduce using rule 76 (value -> ID .)
    L_BRACE         reduce using rule 76 (value -> ID .)
    LOOP            reduce using rule 76 (value -> ID .)
    RETURN          reduce using rule 76 (value -> ID .)
    IMPORT          reduce using rule 76 (value -> ID .)
    CONTINUE        reduce using rule 76 (value -> ID .)
    BREAK           reduce using rule 76 (value -> ID .)
    NOT             reduce using rule 76 (value -> ID .)
    INT             reduce using rule 76 (value -> ID .)
    FLOAT           reduce using rule 76 (value -> ID .)
    STR             reduce using rule 76 (value -> ID .)
    LEN             reduce using rule 76 (value -> ID .)
    NULL            reduce using rule 76 (value -> ID .)
    L_PAREN         shift and go to state 101
    DOT             shift and go to state 105

  ! L_PAREN         [ reduce using rule 76 (value -> ID .) ]
  ! L_BRACKET       [ reduce using rule 76 (value -> ID .) ]

    list_req_access                shift and go to state 102

state 124

    (67) return_command -> RETURN L_PAREN . expression R_PAREN SEMICOLON
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    expression                     shift and go to state 153
    external_call                  shift and go to state 54

state 125

    (29) list_req_access -> L_BRACKET . binary_expression R_BRACKET list_req_access
    (30) list_req_access -> L_BRACKET . binary_expression R_BRACKET
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 49
    unary_operator                 shift and go to state 11
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 139

state 126

    (73) key_value_list -> value . COLON expression

    COLON           shift and go to state 146


state 127

    (14) value_list -> value_list COMMA . expression
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    task_call                      shift and go to state 51
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    expression                     shift and go to state 154
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    external_call                  shift and go to state 54

state 128

    (69) list_def -> L_BRACKET value_list R_BRACKET .

    REM             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    ADD             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    SUB             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    MUL             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    DIV             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    EXP             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    AND             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    OR              reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    XOR             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    MOD             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    RIGHT_OP        reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    LEFT_OP         reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    NOT_OP          reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    AND_OP          reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    OR_OP           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    LE_OP           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    GE_OP           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    EQ_OP           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    NE_OP           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    MAJOR           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    MINOR           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    QUESTION        reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    R_PAREN         reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    COLON           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    R_BRACKET       reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    ID              reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    L_BRACE         reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    LOOP            reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    RETURN          reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    IMPORT          reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    CONTINUE        reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    BREAK           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    L_PAREN         reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    NOT             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    INT             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    FLOAT           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    STR             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    LEN             reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    NULL            reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    L_BRACKET       reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    R_BRACE         reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    COMMA           reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)
    SEMICOLON       reduce using rule 69 (list_def -> L_BRACKET value_list R_BRACKET .)


state 129

    (68) list_def -> L_BRACKET binary_expression COLON . binary_expression R_BRACKET
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 49
    unary_operator                 shift and go to state 11
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 155

state 130

    (10) condition_statement -> expression QUESTION statement . more_condition
    (11) more_condition -> . OR binary_expression QUESTION statement more_condition
    (12) more_condition -> . COLON statement
    (13) more_condition -> . empty
    (109) empty -> .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    OR              shift and go to state 159
    COLON           shift and go to state 156
    ID              reduce using rule 109 (empty -> .)
    $end            reduce using rule 109 (empty -> .)
    R_BRACE         reduce using rule 109 (empty -> .)
    L_BRACE         reduce using rule 109 (empty -> .)
    LOOP            reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    IMPORT          reduce using rule 109 (empty -> .)
    CONTINUE        reduce using rule 109 (empty -> .)
    BREAK           reduce using rule 109 (empty -> .)
    L_PAREN         reduce using rule 109 (empty -> .)
    ADD             reduce using rule 109 (empty -> .)
    SUB             reduce using rule 109 (empty -> .)
    NOT             reduce using rule 109 (empty -> .)
    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    STR             reduce using rule 109 (empty -> .)
    LEN             reduce using rule 109 (empty -> .)
    NULL            reduce using rule 109 (empty -> .)
    L_BRACKET       reduce using rule 109 (empty -> .)

  ! OR              [ reduce using rule 109 (empty -> .) ]
  ! COLON           [ reduce using rule 109 (empty -> .) ]

    more_condition                 shift and go to state 157
    empty                          shift and go to state 158

state 131

    (71) hash_rem -> value REM list_def .

    COMMA           reduce using rule 71 (hash_rem -> value REM list_def .)
    ID              reduce using rule 71 (hash_rem -> value REM list_def .)
    L_BRACE         reduce using rule 71 (hash_rem -> value REM list_def .)
    LOOP            reduce using rule 71 (hash_rem -> value REM list_def .)
    RETURN          reduce using rule 71 (hash_rem -> value REM list_def .)
    IMPORT          reduce using rule 71 (hash_rem -> value REM list_def .)
    CONTINUE        reduce using rule 71 (hash_rem -> value REM list_def .)
    BREAK           reduce using rule 71 (hash_rem -> value REM list_def .)
    L_PAREN         reduce using rule 71 (hash_rem -> value REM list_def .)
    ADD             reduce using rule 71 (hash_rem -> value REM list_def .)
    SUB             reduce using rule 71 (hash_rem -> value REM list_def .)
    NOT             reduce using rule 71 (hash_rem -> value REM list_def .)
    INT             reduce using rule 71 (hash_rem -> value REM list_def .)
    FLOAT           reduce using rule 71 (hash_rem -> value REM list_def .)
    STR             reduce using rule 71 (hash_rem -> value REM list_def .)
    LEN             reduce using rule 71 (hash_rem -> value REM list_def .)
    NULL            reduce using rule 71 (hash_rem -> value REM list_def .)
    L_BRACKET       reduce using rule 71 (hash_rem -> value REM list_def .)
    QUESTION        reduce using rule 71 (hash_rem -> value REM list_def .)
    R_PAREN         reduce using rule 71 (hash_rem -> value REM list_def .)
    R_BRACKET       reduce using rule 71 (hash_rem -> value REM list_def .)
    R_BRACE         reduce using rule 71 (hash_rem -> value REM list_def .)
    SEMICOLON       reduce using rule 71 (hash_rem -> value REM list_def .)


state 132

    (45) expression_statement -> list_req assignment_operator expression .

    SEMICOLON       reduce using rule 45 (expression_statement -> list_req assignment_operator expression .)


state 133

    (21) list_rem -> ID . L_BRACKET OR value R_BRACKET
    (22) list_rem -> ID . L_BRACKET value OR R_BRACKET
    (23) list_rem -> ID . L_BRACKET value OR value R_BRACKET
    (76) value -> ID .
    (75) task_call -> ID . L_PAREN value_list R_PAREN
    (28) list_req -> ID . list_req_access
    (43) external_call -> ID . DOT task_call
    (29) list_req_access -> . L_BRACKET binary_expression R_BRACKET list_req_access
    (30) list_req_access -> . L_BRACKET binary_expression R_BRACKET

  ! shift/reduce conflict for L_BRACKET resolved as shift
  ! shift/reduce conflict for L_PAREN resolved as shift
    L_BRACKET       shift and go to state 104
    REM             reduce using rule 76 (value -> ID .)
    ADD             reduce using rule 76 (value -> ID .)
    SUB             reduce using rule 76 (value -> ID .)
    MUL             reduce using rule 76 (value -> ID .)
    DIV             reduce using rule 76 (value -> ID .)
    EXP             reduce using rule 76 (value -> ID .)
    AND             reduce using rule 76 (value -> ID .)
    OR              reduce using rule 76 (value -> ID .)
    XOR             reduce using rule 76 (value -> ID .)
    MOD             reduce using rule 76 (value -> ID .)
    RIGHT_OP        reduce using rule 76 (value -> ID .)
    LEFT_OP         reduce using rule 76 (value -> ID .)
    NOT_OP          reduce using rule 76 (value -> ID .)
    AND_OP          reduce using rule 76 (value -> ID .)
    OR_OP           reduce using rule 76 (value -> ID .)
    LE_OP           reduce using rule 76 (value -> ID .)
    GE_OP           reduce using rule 76 (value -> ID .)
    EQ_OP           reduce using rule 76 (value -> ID .)
    NE_OP           reduce using rule 76 (value -> ID .)
    MAJOR           reduce using rule 76 (value -> ID .)
    MINOR           reduce using rule 76 (value -> ID .)
    R_PAREN         reduce using rule 76 (value -> ID .)
    COMMA           reduce using rule 76 (value -> ID .)
    R_BRACKET       reduce using rule 76 (value -> ID .)
    SEMICOLON       reduce using rule 76 (value -> ID .)
    ID              reduce using rule 76 (value -> ID .)
    L_BRACE         reduce using rule 76 (value -> ID .)
    LOOP            reduce using rule 76 (value -> ID .)
    RETURN          reduce using rule 76 (value -> ID .)
    IMPORT          reduce using rule 76 (value -> ID .)
    CONTINUE        reduce using rule 76 (value -> ID .)
    BREAK           reduce using rule 76 (value -> ID .)
    NOT             reduce using rule 76 (value -> ID .)
    INT             reduce using rule 76 (value -> ID .)
    FLOAT           reduce using rule 76 (value -> ID .)
    STR             reduce using rule 76 (value -> ID .)
    LEN             reduce using rule 76 (value -> ID .)
    NULL            reduce using rule 76 (value -> ID .)
    R_BRACE         reduce using rule 76 (value -> ID .)
    L_PAREN         shift and go to state 101
    DOT             shift and go to state 105

  ! L_PAREN         [ reduce using rule 76 (value -> ID .) ]
  ! L_BRACKET       [ reduce using rule 76 (value -> ID .) ]

    list_req_access                shift and go to state 102

state 134

    (24) binary_expression -> binary_expression operator binary_expression .
    (24) binary_expression -> binary_expression . operator binary_expression
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for RIGHT_OP resolved as shift
  ! shift/reduce conflict for LEFT_OP resolved as shift
  ! shift/reduce conflict for NOT_OP resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
  ! shift/reduce conflict for LE_OP resolved as shift
  ! shift/reduce conflict for GE_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
  ! shift/reduce conflict for MAJOR resolved as shift
  ! shift/reduce conflict for MINOR resolved as shift
    QUESTION        reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    R_BRACKET       reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    R_BRACE         reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    COMMA           reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    R_PAREN         reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    ID              reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    L_BRACE         reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    LOOP            reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    RETURN          reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    IMPORT          reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    CONTINUE        reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    BREAK           reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    L_PAREN         reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    NOT             reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    INT             reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    FLOAT           reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    STR             reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    LEN             reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    NULL            reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    L_BRACKET       reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    SEMICOLON       reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    COLON           reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .)
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

  ! ADD             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! SUB             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! MUL             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! DIV             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! EXP             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! AND             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! OR              [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! XOR             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! MOD             [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! RIGHT_OP        [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! LEFT_OP         [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! NOT_OP          [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! AND_OP          [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! OR_OP           [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! LE_OP           [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! GE_OP           [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! EQ_OP           [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! NE_OP           [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! MAJOR           [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]
  ! MINOR           [ reduce using rule 24 (binary_expression -> binary_expression operator binary_expression .) ]

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 135

    (75) task_call -> ID L_PAREN value_list . R_PAREN
    (14) value_list -> value_list . COMMA expression

    R_PAREN         shift and go to state 160
    COMMA           shift and go to state 127


state 136

    (64) import_function -> ID ASSIGN IMPORT . L_PAREN STR R_PAREN

    L_PAREN         shift and go to state 161


state 137

    (66) free_function -> ID ASSIGN FREE . L_PAREN ID R_PAREN

    L_PAREN         shift and go to state 162


state 138

    (22) list_rem -> ID L_BRACKET value . OR R_BRACKET
    (23) list_rem -> ID L_BRACKET value . OR value R_BRACKET
    (27) binary_expression -> value .

  ! shift/reduce conflict for OR resolved as shift
    OR              shift and go to state 163
    R_BRACKET       reduce using rule 27 (binary_expression -> value .)
    ADD             reduce using rule 27 (binary_expression -> value .)
    SUB             reduce using rule 27 (binary_expression -> value .)
    MUL             reduce using rule 27 (binary_expression -> value .)
    DIV             reduce using rule 27 (binary_expression -> value .)
    EXP             reduce using rule 27 (binary_expression -> value .)
    AND             reduce using rule 27 (binary_expression -> value .)
    XOR             reduce using rule 27 (binary_expression -> value .)
    MOD             reduce using rule 27 (binary_expression -> value .)
    RIGHT_OP        reduce using rule 27 (binary_expression -> value .)
    LEFT_OP         reduce using rule 27 (binary_expression -> value .)
    NOT_OP          reduce using rule 27 (binary_expression -> value .)
    AND_OP          reduce using rule 27 (binary_expression -> value .)
    OR_OP           reduce using rule 27 (binary_expression -> value .)
    LE_OP           reduce using rule 27 (binary_expression -> value .)
    GE_OP           reduce using rule 27 (binary_expression -> value .)
    EQ_OP           reduce using rule 27 (binary_expression -> value .)
    NE_OP           reduce using rule 27 (binary_expression -> value .)
    MAJOR           reduce using rule 27 (binary_expression -> value .)
    MINOR           reduce using rule 27 (binary_expression -> value .)

  ! OR              [ reduce using rule 27 (binary_expression -> value .) ]


state 139

    (29) list_req_access -> L_BRACKET binary_expression . R_BRACKET list_req_access
    (30) list_req_access -> L_BRACKET binary_expression . R_BRACKET
    (24) binary_expression -> binary_expression . operator binary_expression
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

    R_BRACKET       shift and go to state 164
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 140

    (21) list_rem -> ID L_BRACKET OR . value R_BRACKET
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 165
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51

state 141

    (75) task_call -> ID . L_PAREN value_list R_PAREN

    L_PAREN         shift and go to state 101


state 142

    (43) external_call -> ID DOT task_call .

    REM             reduce using rule 43 (external_call -> ID DOT task_call .)
    ADD             reduce using rule 43 (external_call -> ID DOT task_call .)
    SUB             reduce using rule 43 (external_call -> ID DOT task_call .)
    MUL             reduce using rule 43 (external_call -> ID DOT task_call .)
    DIV             reduce using rule 43 (external_call -> ID DOT task_call .)
    EXP             reduce using rule 43 (external_call -> ID DOT task_call .)
    AND             reduce using rule 43 (external_call -> ID DOT task_call .)
    OR              reduce using rule 43 (external_call -> ID DOT task_call .)
    XOR             reduce using rule 43 (external_call -> ID DOT task_call .)
    MOD             reduce using rule 43 (external_call -> ID DOT task_call .)
    RIGHT_OP        reduce using rule 43 (external_call -> ID DOT task_call .)
    LEFT_OP         reduce using rule 43 (external_call -> ID DOT task_call .)
    NOT_OP          reduce using rule 43 (external_call -> ID DOT task_call .)
    AND_OP          reduce using rule 43 (external_call -> ID DOT task_call .)
    OR_OP           reduce using rule 43 (external_call -> ID DOT task_call .)
    LE_OP           reduce using rule 43 (external_call -> ID DOT task_call .)
    GE_OP           reduce using rule 43 (external_call -> ID DOT task_call .)
    EQ_OP           reduce using rule 43 (external_call -> ID DOT task_call .)
    NE_OP           reduce using rule 43 (external_call -> ID DOT task_call .)
    MAJOR           reduce using rule 43 (external_call -> ID DOT task_call .)
    MINOR           reduce using rule 43 (external_call -> ID DOT task_call .)
    SEMICOLON       reduce using rule 43 (external_call -> ID DOT task_call .)
    COLON           reduce using rule 43 (external_call -> ID DOT task_call .)
    R_PAREN         reduce using rule 43 (external_call -> ID DOT task_call .)
    R_BRACKET       reduce using rule 43 (external_call -> ID DOT task_call .)
    QUESTION        reduce using rule 43 (external_call -> ID DOT task_call .)
    COMMA           reduce using rule 43 (external_call -> ID DOT task_call .)
    ID              reduce using rule 43 (external_call -> ID DOT task_call .)
    L_BRACE         reduce using rule 43 (external_call -> ID DOT task_call .)
    LOOP            reduce using rule 43 (external_call -> ID DOT task_call .)
    RETURN          reduce using rule 43 (external_call -> ID DOT task_call .)
    IMPORT          reduce using rule 43 (external_call -> ID DOT task_call .)
    CONTINUE        reduce using rule 43 (external_call -> ID DOT task_call .)
    BREAK           reduce using rule 43 (external_call -> ID DOT task_call .)
    L_PAREN         reduce using rule 43 (external_call -> ID DOT task_call .)
    NOT             reduce using rule 43 (external_call -> ID DOT task_call .)
    INT             reduce using rule 43 (external_call -> ID DOT task_call .)
    FLOAT           reduce using rule 43 (external_call -> ID DOT task_call .)
    STR             reduce using rule 43 (external_call -> ID DOT task_call .)
    LEN             reduce using rule 43 (external_call -> ID DOT task_call .)
    NULL            reduce using rule 43 (external_call -> ID DOT task_call .)
    L_BRACKET       reduce using rule 43 (external_call -> ID DOT task_call .)
    R_BRACE         reduce using rule 43 (external_call -> ID DOT task_call .)


state 143

    (44) expression_statement -> ID assignment_operator expression .

    SEMICOLON       reduce using rule 44 (expression_statement -> ID assignment_operator expression .)


state 144

    (25) binary_expression -> L_PAREN binary_expression R_PAREN .

    ADD             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    SUB             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    MUL             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    DIV             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    EXP             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    AND             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    OR              reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    XOR             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    MOD             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    RIGHT_OP        reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    LEFT_OP         reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    NOT_OP          reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    AND_OP          reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    OR_OP           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    LE_OP           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    GE_OP           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    EQ_OP           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    NE_OP           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    MAJOR           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    MINOR           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    QUESTION        reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    R_BRACKET       reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    R_BRACE         reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    COMMA           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    R_PAREN         reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    ID              reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    L_BRACE         reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    LOOP            reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    RETURN          reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    IMPORT          reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    CONTINUE        reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    BREAK           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    L_PAREN         reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    NOT             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    INT             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    FLOAT           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    STR             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    LEN             reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    NULL            reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    L_BRACKET       reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    SEMICOLON       reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)
    COLON           reduce using rule 25 (binary_expression -> L_PAREN binary_expression R_PAREN .)


state 145

    (65) import_function -> IMPORT L_PAREN ID . R_PAREN

    R_PAREN         shift and go to state 166


state 146

    (73) key_value_list -> value COLON . expression
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    expression                     shift and go to state 167
    external_call                  shift and go to state 54

state 147

    (60) statement_list -> statement_list statement .

    R_BRACE         reduce using rule 60 (statement_list -> statement_list statement .)
    ID              reduce using rule 60 (statement_list -> statement_list statement .)
    L_BRACE         reduce using rule 60 (statement_list -> statement_list statement .)
    LOOP            reduce using rule 60 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 60 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 60 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 60 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 60 (statement_list -> statement_list statement .)
    L_PAREN         reduce using rule 60 (statement_list -> statement_list statement .)
    ADD             reduce using rule 60 (statement_list -> statement_list statement .)
    SUB             reduce using rule 60 (statement_list -> statement_list statement .)
    NOT             reduce using rule 60 (statement_list -> statement_list statement .)
    INT             reduce using rule 60 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 60 (statement_list -> statement_list statement .)
    STR             reduce using rule 60 (statement_list -> statement_list statement .)
    LEN             reduce using rule 60 (statement_list -> statement_list statement .)
    NULL            reduce using rule 60 (statement_list -> statement_list statement .)
    L_BRACKET       reduce using rule 60 (statement_list -> statement_list statement .)


state 148

    (59) compound_statement -> L_BRACE statement_list R_BRACE .

    OR              reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    COLON           reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    ID              reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    $end            reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    R_BRACE         reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    L_BRACE         reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    LOOP            reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    RETURN          reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    IMPORT          reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CONTINUE        reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    BREAK           reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    L_PAREN         reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    ADD             reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SUB             reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    NOT             reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    INT             reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    FLOAT           reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STR             reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    LEN             reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    NULL            reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)
    L_BRACKET       reduce using rule 59 (compound_statement -> L_BRACE statement_list R_BRACE .)


state 149

    (72) key_value_list -> key_value_list COMMA . value COLON expression
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 168
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    list_def                       shift and go to state 16

state 150

    (70) hash_def -> L_BRACE key_value_list R_BRACE .

    COMMA           reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    ID              reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    L_BRACE         reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    LOOP            reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    RETURN          reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    IMPORT          reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    CONTINUE        reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    BREAK           reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    L_PAREN         reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    ADD             reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    SUB             reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    NOT             reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    INT             reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    FLOAT           reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    STR             reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    LEN             reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    NULL            reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    L_BRACKET       reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    QUESTION        reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    R_BRACE         reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    SEMICOLON       reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    R_PAREN         reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)
    R_BRACKET       reduce using rule 70 (hash_def -> L_BRACE key_value_list R_BRACE .)


state 151

    (7) loop_statement -> LOOP expression statement .

    ID              reduce using rule 7 (loop_statement -> LOOP expression statement .)
    $end            reduce using rule 7 (loop_statement -> LOOP expression statement .)
    OR              reduce using rule 7 (loop_statement -> LOOP expression statement .)
    COLON           reduce using rule 7 (loop_statement -> LOOP expression statement .)
    R_BRACE         reduce using rule 7 (loop_statement -> LOOP expression statement .)
    L_BRACE         reduce using rule 7 (loop_statement -> LOOP expression statement .)
    LOOP            reduce using rule 7 (loop_statement -> LOOP expression statement .)
    RETURN          reduce using rule 7 (loop_statement -> LOOP expression statement .)
    IMPORT          reduce using rule 7 (loop_statement -> LOOP expression statement .)
    CONTINUE        reduce using rule 7 (loop_statement -> LOOP expression statement .)
    BREAK           reduce using rule 7 (loop_statement -> LOOP expression statement .)
    L_PAREN         reduce using rule 7 (loop_statement -> LOOP expression statement .)
    ADD             reduce using rule 7 (loop_statement -> LOOP expression statement .)
    SUB             reduce using rule 7 (loop_statement -> LOOP expression statement .)
    NOT             reduce using rule 7 (loop_statement -> LOOP expression statement .)
    INT             reduce using rule 7 (loop_statement -> LOOP expression statement .)
    FLOAT           reduce using rule 7 (loop_statement -> LOOP expression statement .)
    STR             reduce using rule 7 (loop_statement -> LOOP expression statement .)
    LEN             reduce using rule 7 (loop_statement -> LOOP expression statement .)
    NULL            reduce using rule 7 (loop_statement -> LOOP expression statement .)
    L_BRACKET       reduce using rule 7 (loop_statement -> LOOP expression statement .)


state 152

    (8) loop_statement -> LOOP ID COMMA . expression COMMA value statement
    (9) loop_statement -> LOOP ID COMMA . expression statement
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    expression                     shift and go to state 169
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    task_call                      shift and go to state 51
    external_call                  shift and go to state 54

state 153

    (67) return_command -> RETURN L_PAREN expression . R_PAREN SEMICOLON

    R_PAREN         shift and go to state 170


state 154

    (14) value_list -> value_list COMMA expression .

    R_BRACKET       reduce using rule 14 (value_list -> value_list COMMA expression .)
    COMMA           reduce using rule 14 (value_list -> value_list COMMA expression .)
    R_PAREN         reduce using rule 14 (value_list -> value_list COMMA expression .)


state 155

    (68) list_def -> L_BRACKET binary_expression COLON binary_expression . R_BRACKET
    (24) binary_expression -> binary_expression . operator binary_expression
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

    R_BRACKET       shift and go to state 171
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 156

    (12) more_condition -> COLON . statement
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    compound_statement             shift and go to state 12
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    list_rem                       shift and go to state 18
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 172
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    free_function                  shift and go to state 43
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 157

    (10) condition_statement -> expression QUESTION statement more_condition .

    ID              reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    $end            reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    R_BRACE         reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    L_BRACE         reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    LOOP            reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    RETURN          reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    IMPORT          reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    CONTINUE        reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    BREAK           reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    L_PAREN         reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    ADD             reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    SUB             reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    NOT             reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    INT             reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    FLOAT           reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    STR             reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    LEN             reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    NULL            reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    L_BRACKET       reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    OR              reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)
    COLON           reduce using rule 10 (condition_statement -> expression QUESTION statement more_condition .)


state 158

    (13) more_condition -> empty .

    OR              reduce using rule 13 (more_condition -> empty .)
    COLON           reduce using rule 13 (more_condition -> empty .)
    ID              reduce using rule 13 (more_condition -> empty .)
    $end            reduce using rule 13 (more_condition -> empty .)
    R_BRACE         reduce using rule 13 (more_condition -> empty .)
    L_BRACE         reduce using rule 13 (more_condition -> empty .)
    LOOP            reduce using rule 13 (more_condition -> empty .)
    RETURN          reduce using rule 13 (more_condition -> empty .)
    IMPORT          reduce using rule 13 (more_condition -> empty .)
    CONTINUE        reduce using rule 13 (more_condition -> empty .)
    BREAK           reduce using rule 13 (more_condition -> empty .)
    L_PAREN         reduce using rule 13 (more_condition -> empty .)
    ADD             reduce using rule 13 (more_condition -> empty .)
    SUB             reduce using rule 13 (more_condition -> empty .)
    NOT             reduce using rule 13 (more_condition -> empty .)
    INT             reduce using rule 13 (more_condition -> empty .)
    FLOAT           reduce using rule 13 (more_condition -> empty .)
    STR             reduce using rule 13 (more_condition -> empty .)
    LEN             reduce using rule 13 (more_condition -> empty .)
    NULL            reduce using rule 13 (more_condition -> empty .)
    L_BRACKET       reduce using rule 13 (more_condition -> empty .)


state 159

    (11) more_condition -> OR . binary_expression QUESTION statement more_condition
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 49
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 173
    list_def                       shift and go to state 16
    external_call                  shift and go to state 54

state 160

    (75) task_call -> ID L_PAREN value_list R_PAREN .

    SEMICOLON       reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    REM             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    ADD             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    SUB             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    MUL             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    DIV             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    EXP             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    AND             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    OR              reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    XOR             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    MOD             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    RIGHT_OP        reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    LEFT_OP         reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    NOT_OP          reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    AND_OP          reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    OR_OP           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    LE_OP           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    GE_OP           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    EQ_OP           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    NE_OP           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    MAJOR           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    MINOR           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    QUESTION        reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    COLON           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    R_BRACKET       reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    COMMA           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    R_PAREN         reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    ID              reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    L_BRACE         reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    LOOP            reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    RETURN          reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    IMPORT          reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    CONTINUE        reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    BREAK           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    L_PAREN         reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    NOT             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    INT             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    FLOAT           reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    STR             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    LEN             reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    NULL            reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    L_BRACKET       reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)
    R_BRACE         reduce using rule 75 (task_call -> ID L_PAREN value_list R_PAREN .)


state 161

    (64) import_function -> ID ASSIGN IMPORT L_PAREN . STR R_PAREN

    STR             shift and go to state 174


state 162

    (66) free_function -> ID ASSIGN FREE L_PAREN . ID R_PAREN

    ID              shift and go to state 175


state 163

    (22) list_rem -> ID L_BRACKET value OR . R_BRACKET
    (23) list_rem -> ID L_BRACKET value OR . value R_BRACKET
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    R_BRACKET       shift and go to state 177
    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 176
    list_def                       shift and go to state 16
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51

state 164

    (29) list_req_access -> L_BRACKET binary_expression R_BRACKET . list_req_access
    (30) list_req_access -> L_BRACKET binary_expression R_BRACKET .
    (29) list_req_access -> . L_BRACKET binary_expression R_BRACKET list_req_access
    (30) list_req_access -> . L_BRACKET binary_expression R_BRACKET

  ! shift/reduce conflict for L_BRACKET resolved as shift
    REM             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    ADD             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    SUB             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    MUL             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    DIV             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    EXP             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    AND             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    OR              reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    XOR             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    MOD             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    RIGHT_OP        reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    LEFT_OP         reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    NOT_OP          reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    AND_OP          reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    OR_OP           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    LE_OP           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    GE_OP           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    EQ_OP           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    NE_OP           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    MAJOR           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    MINOR           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    ID              reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    L_BRACE         reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    LOOP            reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    RETURN          reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    IMPORT          reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    CONTINUE        reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    BREAK           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    L_PAREN         reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    NOT             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    INT             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    FLOAT           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    STR             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    LEN             reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    NULL            reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    ASSIGN          reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    MUL_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    DIV_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    ADD_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    SUB_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    EXP_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    LEFT_ASSIGN     reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    AND_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    OR_ASSIGN       reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    XOR_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    MOD_ASSIGN      reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    QUESTION        reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    COLON           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    R_BRACKET       reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    COMMA           reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    R_PAREN         reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    SEMICOLON       reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    R_BRACE         reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .)
    L_BRACKET       shift and go to state 125

  ! L_BRACKET       [ reduce using rule 30 (list_req_access -> L_BRACKET binary_expression R_BRACKET .) ]

    list_req_access                shift and go to state 178

state 165

    (21) list_rem -> ID L_BRACKET OR value . R_BRACKET

    R_BRACKET       shift and go to state 179


state 166

    (65) import_function -> IMPORT L_PAREN ID R_PAREN .

    SEMICOLON       reduce using rule 65 (import_function -> IMPORT L_PAREN ID R_PAREN .)


state 167

    (73) key_value_list -> value COLON expression .

    R_BRACE         reduce using rule 73 (key_value_list -> value COLON expression .)
    COMMA           reduce using rule 73 (key_value_list -> value COLON expression .)


state 168

    (72) key_value_list -> key_value_list COMMA value . COLON expression

    COLON           shift and go to state 180


state 169

    (8) loop_statement -> LOOP ID COMMA expression . COMMA value statement
    (9) loop_statement -> LOOP ID COMMA expression . statement
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    COMMA           shift and go to state 182
    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    compound_statement             shift and go to state 12
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    list_rem                       shift and go to state 18
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 181
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    free_function                  shift and go to state 43
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 170

    (67) return_command -> RETURN L_PAREN expression R_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 183


state 171

    (68) list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .

    REM             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    ADD             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    SUB             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    MUL             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    DIV             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    EXP             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    AND             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    OR              reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    XOR             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    MOD             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    RIGHT_OP        reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    LEFT_OP         reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    NOT_OP          reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    AND_OP          reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    OR_OP           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    LE_OP           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    GE_OP           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    EQ_OP           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    NE_OP           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    MAJOR           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    MINOR           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    QUESTION        reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    R_PAREN         reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    COLON           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    R_BRACKET       reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    ID              reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    L_BRACE         reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    LOOP            reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    RETURN          reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    IMPORT          reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    CONTINUE        reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    BREAK           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    L_PAREN         reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    NOT             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    INT             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    FLOAT           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    STR             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    LEN             reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    NULL            reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    L_BRACKET       reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    R_BRACE         reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    COMMA           reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)
    SEMICOLON       reduce using rule 68 (list_def -> L_BRACKET binary_expression COLON binary_expression R_BRACKET .)


state 172

    (12) more_condition -> COLON statement .

    OR              reduce using rule 12 (more_condition -> COLON statement .)
    COLON           reduce using rule 12 (more_condition -> COLON statement .)
    ID              reduce using rule 12 (more_condition -> COLON statement .)
    $end            reduce using rule 12 (more_condition -> COLON statement .)
    R_BRACE         reduce using rule 12 (more_condition -> COLON statement .)
    L_BRACE         reduce using rule 12 (more_condition -> COLON statement .)
    LOOP            reduce using rule 12 (more_condition -> COLON statement .)
    RETURN          reduce using rule 12 (more_condition -> COLON statement .)
    IMPORT          reduce using rule 12 (more_condition -> COLON statement .)
    CONTINUE        reduce using rule 12 (more_condition -> COLON statement .)
    BREAK           reduce using rule 12 (more_condition -> COLON statement .)
    L_PAREN         reduce using rule 12 (more_condition -> COLON statement .)
    ADD             reduce using rule 12 (more_condition -> COLON statement .)
    SUB             reduce using rule 12 (more_condition -> COLON statement .)
    NOT             reduce using rule 12 (more_condition -> COLON statement .)
    INT             reduce using rule 12 (more_condition -> COLON statement .)
    FLOAT           reduce using rule 12 (more_condition -> COLON statement .)
    STR             reduce using rule 12 (more_condition -> COLON statement .)
    LEN             reduce using rule 12 (more_condition -> COLON statement .)
    NULL            reduce using rule 12 (more_condition -> COLON statement .)
    L_BRACKET       reduce using rule 12 (more_condition -> COLON statement .)


state 173

    (11) more_condition -> OR binary_expression . QUESTION statement more_condition
    (24) binary_expression -> binary_expression . operator binary_expression
    (31) operator -> . binary_operator
    (32) operator -> . relational_operator
    (89) binary_operator -> . ADD
    (90) binary_operator -> . SUB
    (91) binary_operator -> . MUL
    (92) binary_operator -> . DIV
    (93) binary_operator -> . EXP
    (94) binary_operator -> . AND
    (95) binary_operator -> . OR
    (96) binary_operator -> . XOR
    (97) binary_operator -> . MOD
    (98) binary_operator -> . RIGHT_OP
    (99) binary_operator -> . LEFT_OP
    (100) relational_operator -> . NOT_OP
    (101) relational_operator -> . AND_OP
    (102) relational_operator -> . OR_OP
    (103) relational_operator -> . LE_OP
    (104) relational_operator -> . GE_OP
    (105) relational_operator -> . EQ_OP
    (106) relational_operator -> . NE_OP
    (107) relational_operator -> . MAJOR
    (108) relational_operator -> . MINOR

    QUESTION        shift and go to state 184
    ADD             shift and go to state 99
    SUB             shift and go to state 95
    MUL             shift and go to state 79
    DIV             shift and go to state 81
    EXP             shift and go to state 100
    AND             shift and go to state 90
    OR              shift and go to state 97
    XOR             shift and go to state 91
    MOD             shift and go to state 86
    RIGHT_OP        shift and go to state 89
    LEFT_OP         shift and go to state 94
    NOT_OP          shift and go to state 84
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 85
    LE_OP           shift and go to state 96
    GE_OP           shift and go to state 83
    EQ_OP           shift and go to state 98
    NE_OP           shift and go to state 78
    MAJOR           shift and go to state 82
    MINOR           shift and go to state 88

    operator                       shift and go to state 87
    relational_operator            shift and go to state 93
    binary_operator                shift and go to state 80

state 174

    (64) import_function -> ID ASSIGN IMPORT L_PAREN STR . R_PAREN

    R_PAREN         shift and go to state 185


state 175

    (66) free_function -> ID ASSIGN FREE L_PAREN ID . R_PAREN

    R_PAREN         shift and go to state 186


state 176

    (23) list_rem -> ID L_BRACKET value OR value . R_BRACKET

    R_BRACKET       shift and go to state 187


state 177

    (22) list_rem -> ID L_BRACKET value OR R_BRACKET .

    QUESTION        reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    R_BRACE         reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    COMMA           reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    ID              reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    L_BRACE         reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    LOOP            reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    RETURN          reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    IMPORT          reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    CONTINUE        reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    BREAK           reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    L_PAREN         reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    ADD             reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    SUB             reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    NOT             reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    INT             reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    FLOAT           reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    STR             reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    LEN             reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    NULL            reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    L_BRACKET       reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    SEMICOLON       reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    R_BRACKET       reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)
    R_PAREN         reduce using rule 22 (list_rem -> ID L_BRACKET value OR R_BRACKET .)


state 178

    (29) list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .

    REM             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    ADD             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    SUB             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    MUL             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    DIV             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    EXP             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    AND             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    OR              reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    XOR             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    MOD             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    RIGHT_OP        reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    LEFT_OP         reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    NOT_OP          reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    AND_OP          reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    OR_OP           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    LE_OP           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    GE_OP           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    EQ_OP           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    NE_OP           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    MAJOR           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    MINOR           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    ID              reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    L_BRACE         reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    LOOP            reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    RETURN          reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    IMPORT          reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    CONTINUE        reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    BREAK           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    L_PAREN         reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    NOT             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    INT             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    FLOAT           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    STR             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    LEN             reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    NULL            reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    L_BRACKET       reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    ASSIGN          reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    MUL_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    DIV_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    ADD_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    SUB_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    EXP_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    LEFT_ASSIGN     reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    RIGHT_ASSIGN    reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    AND_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    OR_ASSIGN       reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    XOR_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    MOD_ASSIGN      reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    QUESTION        reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    COLON           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    R_BRACKET       reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    COMMA           reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    R_PAREN         reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    SEMICOLON       reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)
    R_BRACE         reduce using rule 29 (list_req_access -> L_BRACKET binary_expression R_BRACKET list_req_access .)


state 179

    (21) list_rem -> ID L_BRACKET OR value R_BRACKET .

    QUESTION        reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    R_BRACE         reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    COMMA           reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    ID              reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    L_BRACE         reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    LOOP            reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    RETURN          reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    IMPORT          reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    CONTINUE        reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    BREAK           reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    L_PAREN         reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    ADD             reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    SUB             reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    NOT             reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    INT             reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    FLOAT           reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    STR             reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    LEN             reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    NULL            reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    L_BRACKET       reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    SEMICOLON       reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    R_BRACKET       reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)
    R_PAREN         reduce using rule 21 (list_rem -> ID L_BRACKET OR value R_BRACKET .)


state 180

    (72) key_value_list -> key_value_list COMMA value COLON . expression
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    L_PAREN         shift and go to state 34
    ID              shift and go to state 133
    L_BRACE         shift and go to state 55
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 21
    unary_operator                 shift and go to state 11
    list_req                       shift and go to state 50
    hash_def                       shift and go to state 25
    hash_rem                       shift and go to state 27
    task_call                      shift and go to state 51
    binary_expression              shift and go to state 29
    list_def                       shift and go to state 16
    list_rem                       shift and go to state 18
    expression                     shift and go to state 188
    external_call                  shift and go to state 54

state 181

    (9) loop_statement -> LOOP ID COMMA expression statement .

    ID              reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    $end            reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    OR              reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    COLON           reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    R_BRACE         reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    L_BRACE         reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    LOOP            reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    RETURN          reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    IMPORT          reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    CONTINUE        reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    BREAK           reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    L_PAREN         reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    ADD             reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    SUB             reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    NOT             reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    INT             reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    FLOAT           reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    STR             reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    LEN             reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    NULL            reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)
    L_BRACKET       reduce using rule 9 (loop_statement -> LOOP ID COMMA expression statement .)


state 182

    (8) loop_statement -> LOOP ID COMMA expression COMMA . value statement
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (28) list_req -> . ID list_req_access
    (43) external_call -> . ID DOT task_call
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    value                          shift and go to state 189
    list_req                       shift and go to state 50
    external_call                  shift and go to state 54
    task_call                      shift and go to state 51
    list_def                       shift and go to state 16

state 183

    (67) return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .

    OR              reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    COLON           reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    ID              reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    $end            reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    R_BRACE         reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    L_BRACE         reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    LOOP            reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    RETURN          reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    IMPORT          reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    CONTINUE        reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    BREAK           reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    L_PAREN         reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    ADD             reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    SUB             reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    NOT             reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    INT             reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    FLOAT           reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    STR             reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    LEN             reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    NULL            reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)
    L_BRACKET       reduce using rule 67 (return_command -> RETURN L_PAREN expression R_PAREN SEMICOLON .)


state 184

    (11) more_condition -> OR binary_expression QUESTION . statement more_condition
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    compound_statement             shift and go to state 12
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    list_rem                       shift and go to state 18
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 190
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    free_function                  shift and go to state 43
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 185

    (64) import_function -> ID ASSIGN IMPORT L_PAREN STR R_PAREN .

    SEMICOLON       reduce using rule 64 (import_function -> ID ASSIGN IMPORT L_PAREN STR R_PAREN .)


state 186

    (66) free_function -> ID ASSIGN FREE L_PAREN ID R_PAREN .

    SEMICOLON       reduce using rule 66 (free_function -> ID ASSIGN FREE L_PAREN ID R_PAREN .)


state 187

    (23) list_rem -> ID L_BRACKET value OR value R_BRACKET .

    QUESTION        reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    R_BRACE         reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    COMMA           reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    ID              reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    L_BRACE         reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    LOOP            reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    RETURN          reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    IMPORT          reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    CONTINUE        reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    BREAK           reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    L_PAREN         reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    ADD             reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    SUB             reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    NOT             reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    INT             reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    FLOAT           reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    STR             reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    LEN             reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    NULL            reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    L_BRACKET       reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    SEMICOLON       reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    R_BRACKET       reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)
    R_PAREN         reduce using rule 23 (list_rem -> ID L_BRACKET value OR value R_BRACKET .)


state 188

    (72) key_value_list -> key_value_list COMMA value COLON expression .

    R_BRACE         reduce using rule 72 (key_value_list -> key_value_list COMMA value COLON expression .)
    COMMA           reduce using rule 72 (key_value_list -> key_value_list COMMA value COLON expression .)


state 189

    (8) loop_statement -> LOOP ID COMMA expression COMMA value . statement
    (33) statement -> . expression_statement SEMICOLON
    (34) statement -> . compound_statement
    (35) statement -> . loop_statement
    (36) statement -> . condition_statement
    (37) statement -> . return_command
    (38) statement -> . free_function SEMICOLON
    (39) statement -> . import_function SEMICOLON
    (40) statement -> . external_call SEMICOLON
    (41) statement -> . task_call SEMICOLON
    (42) statement -> . loop_flows SEMICOLON
    (44) expression_statement -> . ID assignment_operator expression
    (45) expression_statement -> . list_req assignment_operator expression
    (58) compound_statement -> . L_BRACE R_BRACE
    (59) compound_statement -> . L_BRACE statement_list R_BRACE
    (7) loop_statement -> . LOOP expression statement
    (8) loop_statement -> . LOOP ID COMMA expression COMMA value statement
    (9) loop_statement -> . LOOP ID COMMA expression statement
    (10) condition_statement -> . expression QUESTION statement more_condition
    (67) return_command -> . RETURN L_PAREN expression R_PAREN SEMICOLON
    (66) free_function -> . ID ASSIGN FREE L_PAREN ID R_PAREN
    (64) import_function -> . ID ASSIGN IMPORT L_PAREN STR R_PAREN
    (65) import_function -> . IMPORT L_PAREN ID R_PAREN
    (43) external_call -> . ID DOT task_call
    (75) task_call -> . ID L_PAREN value_list R_PAREN
    (62) loop_flows -> . CONTINUE
    (63) loop_flows -> . BREAK
    (28) list_req -> . ID list_req_access
    (17) expression -> . binary_expression
    (18) expression -> . list_rem
    (19) expression -> . hash_def
    (20) expression -> . hash_rem
    (24) binary_expression -> . binary_expression operator binary_expression
    (25) binary_expression -> . L_PAREN binary_expression R_PAREN
    (26) binary_expression -> . unary_operator binary_expression
    (27) binary_expression -> . value
    (21) list_rem -> . ID L_BRACKET OR value R_BRACKET
    (22) list_rem -> . ID L_BRACKET value OR R_BRACKET
    (23) list_rem -> . ID L_BRACKET value OR value R_BRACKET
    (70) hash_def -> . L_BRACE key_value_list R_BRACE
    (71) hash_rem -> . value REM list_def
    (86) unary_operator -> . ADD
    (87) unary_operator -> . SUB
    (88) unary_operator -> . NOT
    (76) value -> . ID
    (77) value -> . INT
    (78) value -> . FLOAT
    (79) value -> . STR
    (80) value -> . task_call
    (81) value -> . list_req
    (82) value -> . external_call
    (83) value -> . list_def
    (84) value -> . LEN value
    (85) value -> . NULL
    (68) list_def -> . L_BRACKET binary_expression COLON binary_expression R_BRACKET
    (69) list_def -> . L_BRACKET value_list R_BRACKET

    ID              shift and go to state 32
    L_BRACE         shift and go to state 36
    LOOP            shift and go to state 46
    RETURN          shift and go to state 47
    IMPORT          shift and go to state 35
    CONTINUE        shift and go to state 41
    BREAK           shift and go to state 14
    L_PAREN         shift and go to state 34
    ADD             shift and go to state 39
    SUB             shift and go to state 38
    NOT             shift and go to state 44
    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STR             shift and go to state 45
    LEN             shift and go to state 40
    NULL            shift and go to state 23
    L_BRACKET       shift and go to state 13

    expression_statement           shift and go to state 33
    unary_operator                 shift and go to state 11
    return_command                 shift and go to state 19
    compound_statement             shift and go to state 12
    expression                     shift and go to state 15
    hash_rem                       shift and go to state 27
    loop_flows                     shift and go to state 17
    list_rem                       shift and go to state 18
    import_function                shift and go to state 37
    value                          shift and go to state 21
    statement                      shift and go to state 191
    hash_def                       shift and go to state 25
    list_req                       shift and go to state 26
    free_function                  shift and go to state 43
    task_call                      shift and go to state 28
    binary_expression              shift and go to state 29
    condition_statement            shift and go to state 30
    loop_statement                 shift and go to state 31
    external_call                  shift and go to state 42
    list_def                       shift and go to state 16

state 190

    (11) more_condition -> OR binary_expression QUESTION statement . more_condition
    (11) more_condition -> . OR binary_expression QUESTION statement more_condition
    (12) more_condition -> . COLON statement
    (13) more_condition -> . empty
    (109) empty -> .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    OR              shift and go to state 159
    COLON           shift and go to state 156
    ID              reduce using rule 109 (empty -> .)
    $end            reduce using rule 109 (empty -> .)
    R_BRACE         reduce using rule 109 (empty -> .)
    L_BRACE         reduce using rule 109 (empty -> .)
    LOOP            reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    IMPORT          reduce using rule 109 (empty -> .)
    CONTINUE        reduce using rule 109 (empty -> .)
    BREAK           reduce using rule 109 (empty -> .)
    L_PAREN         reduce using rule 109 (empty -> .)
    ADD             reduce using rule 109 (empty -> .)
    SUB             reduce using rule 109 (empty -> .)
    NOT             reduce using rule 109 (empty -> .)
    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    STR             reduce using rule 109 (empty -> .)
    LEN             reduce using rule 109 (empty -> .)
    NULL            reduce using rule 109 (empty -> .)
    L_BRACKET       reduce using rule 109 (empty -> .)

  ! OR              [ reduce using rule 109 (empty -> .) ]
  ! COLON           [ reduce using rule 109 (empty -> .) ]

    more_condition                 shift and go to state 192
    empty                          shift and go to state 158

state 191

    (8) loop_statement -> LOOP ID COMMA expression COMMA value statement .

    ID              reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    $end            reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    OR              reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    COLON           reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    R_BRACE         reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    L_BRACE         reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    LOOP            reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    RETURN          reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    IMPORT          reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    CONTINUE        reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    BREAK           reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    L_PAREN         reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    ADD             reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    SUB             reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    NOT             reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    INT             reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    FLOAT           reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    STR             reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    LEN             reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    NULL            reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)
    L_BRACKET       reduce using rule 8 (loop_statement -> LOOP ID COMMA expression COMMA value statement .)


state 192

    (11) more_condition -> OR binary_expression QUESTION statement more_condition .

    OR              reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    COLON           reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    ID              reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    $end            reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    R_BRACE         reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    L_BRACE         reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    LOOP            reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    RETURN          reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    IMPORT          reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    CONTINUE        reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    BREAK           reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    L_PAREN         reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    ADD             reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    SUB             reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    NOT             reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    INT             reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    FLOAT           reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    STR             reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    LEN             reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    NULL            reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)
    L_BRACKET       reduce using rule 11 (more_condition -> OR binary_expression QUESTION statement more_condition .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 29 resolved as shift
WARNING: shift/reduce conflict for SUB in state 29 resolved as shift
WARNING: shift/reduce conflict for R_BRACE in state 36 resolved as shift
WARNING: shift/reduce conflict for ADD in state 52 resolved as shift
WARNING: shift/reduce conflict for SUB in state 52 resolved as shift
WARNING: shift/reduce conflict for MUL in state 52 resolved as shift
WARNING: shift/reduce conflict for DIV in state 52 resolved as shift
WARNING: shift/reduce conflict for EXP in state 52 resolved as shift
WARNING: shift/reduce conflict for AND in state 52 resolved as shift
WARNING: shift/reduce conflict for OR in state 52 resolved as shift
WARNING: shift/reduce conflict for XOR in state 52 resolved as shift
WARNING: shift/reduce conflict for MOD in state 52 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for NOT_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for LE_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for GE_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 52 resolved as shift
WARNING: shift/reduce conflict for MAJOR in state 52 resolved as shift
WARNING: shift/reduce conflict for MINOR in state 52 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 53 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 123 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for COLON in state 130 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 133 resolved as shift
WARNING: shift/reduce conflict for L_PAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for ADD in state 134 resolved as shift
WARNING: shift/reduce conflict for SUB in state 134 resolved as shift
WARNING: shift/reduce conflict for MUL in state 134 resolved as shift
WARNING: shift/reduce conflict for DIV in state 134 resolved as shift
WARNING: shift/reduce conflict for EXP in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for XOR in state 134 resolved as shift
WARNING: shift/reduce conflict for MOD in state 134 resolved as shift
WARNING: shift/reduce conflict for RIGHT_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for LEFT_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for LE_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for GE_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for MAJOR in state 134 resolved as shift
WARNING: shift/reduce conflict for MINOR in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 164 resolved as shift
WARNING: shift/reduce conflict for OR in state 190 resolved as shift
WARNING: shift/reduce conflict for COLON in state 190 resolved as shift
